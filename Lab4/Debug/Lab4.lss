
AVRASM ver. 2.2.8  C:\Users\bwarr\Downloads\OSU Fall 2022\ECE 375\Lab4\Lab4\Lab4\Benjamin_Warren_Lab4_sourcecode.asm Fri Nov 04 17:18:35 2022

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m128def.inc'
C:\Users\bwarr\Downloads\OSU Fall 2022\ECE 375\Lab4\Lab4\Lab4\Benjamin_Warren_Lab4_sourcecode.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m128def.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m128def.inc'
C:\Users\bwarr\Downloads\OSU Fall 2022\ECE 375\Lab4\Lab4\Lab4\Benjamin_Warren_Lab4_sourcecode.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m128def.inc'
                                 
                                 ;***********************************************************
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #define _M128DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega128
                                 #pragma AVRPART ADMIN PART_NAME ATmega128
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x97
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UCSR1C	= 0x9d	; MEMORY MAPPED
                                 .equ	UDR1	= 0x9c	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0x9b	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0x9a	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0x98	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0x99	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0x95	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0x90	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x8c	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x8b	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x8a	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x88	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x89	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x86	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x87	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x84	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x85	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x82	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x83	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x80	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x81	; MEMORY MAPPED
                                 .equ	ETIMSK	= 0x7d	; MEMORY MAPPED
                                 .equ	ETIFR	= 0x7c	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x7a	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x78	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x79	; MEMORY MAPPED
                                 .equ	TWCR	= 0x74	; MEMORY MAPPED
                                 .equ	TWDR	= 0x73	; MEMORY MAPPED
                                 .equ	TWAR	= 0x72	; MEMORY MAPPED
                                 .equ	TWSR	= 0x71	; MEMORY MAPPED
                                 .equ	TWBR	= 0x70	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x6f	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x6d	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x6c	; MEMORY MAPPED
                                 .equ	EICRA	= 0x6a	; MEMORY MAPPED
                                 .equ	SPMCSR	= 0x68	; MEMORY MAPPED
                                 .equ	PORTG	= 0x65	; MEMORY MAPPED
                                 .equ	DDRG	= 0x64	; MEMORY MAPPED
                                 .equ	PING	= 0x63	; MEMORY MAPPED
                                 .equ	PORTF	= 0x62	; MEMORY MAPPED
                                 .equ	DDRF	= 0x61	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	XDIV	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	EICRB	= 0x3a
                                 .equ	EIMSK	= 0x39
                                 .equ	EIFR	= 0x38
                                 .equ	TIMSK	= 0x37
                                 .equ	TIFR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OCR0	= 0x31
                                 .equ	ASSR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	OCDR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	SFIOR	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR0	= 0x0c
                                 .equ	UCSR0A	= 0x0b
                                 .equ	UCSR0B	= 0x0a
                                 .equ	UBRR0L	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	PORTE	= 0x03
                                 .equ	DDRE	= 0x02
                                 .equ	PINE	= 0x01
                                 .equ	PINF	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR00	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR01	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR02	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR03	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR04	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR05	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR06	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR07	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	UCSZ2	= UCSZ02	; For compatibility
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL0	= 6	; USART Mode Select
                                 
                                 ; UBRR0H - USART Baud Rate Register Hight Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR10	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR11	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR12	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR13	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR14	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR15	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR16	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR17	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL1	= 6	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register Hight Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	SM2	= 2	; Sleep Mode Select
                                 .equ	SM0	= 3	; Sleep Mode Select
                                 .equ	SM1	= 4	; Sleep Mode Select
                                 .equ	SE	= 5	; Sleep Enable
                                 .equ	SRW10	= 6	; External SRAM Wait State Select
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW11	= 1	; Wait state select bit upper page
                                 .equ	SRW00	= 2	; Wait state select bit lower page
                                 .equ	SRW01	= 3	; Wait state select bit lower page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value
                                 .equ	CAL1	= 1	; Oscillator Calibration Value
                                 .equ	CAL2	= 2	; Oscillator Calibration Value
                                 .equ	CAL3	= 3	; Oscillator Calibration Value
                                 .equ	CAL4	= 4	; Oscillator Calibration Value
                                 .equ	CAL5	= 5	; Oscillator Calibration Value
                                 .equ	CAL6	= 6	; Oscillator Calibration Value
                                 .equ	CAL7	= 7	; Oscillator Calibration Value
                                 
                                 ; XDIV - XTAL Divide Control Register
                                 .equ	XDIV0	= 0	; XTAl Divide Select Bit 0
                                 .equ	XDIV1	= 1	; XTAl Divide Select Bit 1
                                 .equ	XDIV2	= 2	; XTAl Divide Select Bit 2
                                 .equ	XDIV3	= 3	; XTAl Divide Select Bit 3
                                 .equ	XDIV4	= 4	; XTAl Divide Select Bit 4
                                 .equ	XDIV5	= 5	; XTAl Divide Select Bit 5
                                 .equ	XDIV6	= 6	; XTAl Divide Select Bit 6
                                 .equ	XDIVEN	= 7	; XTAL Divide Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** MISC *************************
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR321	= 0	; Prescaler Reset Timer/Counter3, Timer/Counter2, and Timer/Counter1
                                 .equ	PSR1	= PSR321	; For compatibility
                                 .equ	PSR2	= PSR321	; For compatibility
                                 .equ	PSR3	= PSR321	; For compatibility
                                 .equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 .equ	PUD	= 2	; Pull Up Disable
                                 ;.equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	GICR	= EIMSK	; For compatibility
                                 .equ	GIMSK	= EIMSK	; For compatibility
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	GIFR	= EIFR	; For compatibility
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 0
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; ASSR - Asynchronus Status Register
                                 .equ	TCR0UB	= 0	; Timer/Counter Control Register 0 Update Busy
                                 .equ	OCR0UB	= 1	; Output Compare register 0 Busy
                                 .equ	TCN0UB	= 2	; Timer/Counter0 Update Busy
                                 .equ	AS0	= 3	; Asynchronus Timer/Counter 0
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE1C	= 0	; Timer/Counter 1, Output Compare Match C Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF1C	= 0	; Timer/Counter 1, Output Compare C Match Flag
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select bit 0
                                 .equ	CS11	= 1	; Clock Select 1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare for channel C
                                 .equ	FOC1B	= 6	; Force Output Compare for channel B
                                 .equ	FOC1A	= 7	; Force Output Compare for channel A
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TCCR2 - Timer/Counter Control Register
                                 .equ	CS20	= 0	; Clock Select
                                 .equ	CS21	= 1	; Clock Select
                                 .equ	CS22	= 2	; Clock Select
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Match Output Mode
                                 .equ	COM21	= 5	; Compare Match Output Mode
                                 .equ	WGM20	= 6	; Wafeform Generation Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter Register
                                 .equ	TCNT2_0	= 0	; Timer/Counter Register Bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter Register Bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter Register Bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter Register Bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter Register Bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter Register Bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter Register Bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter Register Bit 7
                                 
                                 ; OCR2 - Output Compare Register
                                 .equ	OCR2_0	= 0	; Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Output Compare Register Bit 7
                                 
                                 ; TIMSK - 
                                 .equ	TOIE2	= 6	; 
                                 .equ	OCIE2	= 7	; 
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE3C	= 1	; Timer/Counter3, Output Compare Match Interrupt Enable
                                 .equ	TOIE3	= 2	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3B	= 3	; Timer/Counter3 Output CompareB Match Interrupt Enable
                                 .equ	OCIE3A	= 4	; Timer/Counter3 Output CompareA Match Interrupt Enable
                                 .equ	TICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF3C	= 1	; Timer/Counter3 Output Compare C Match Flag
                                 .equ	TOV3	= 2	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3B	= 3	; Output Compare Flag 1B
                                 .equ	OCF3A	= 4	; Output Compare Flag 1A
                                 .equ	ICF3	= 5	; Input Capture Flag 1
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	PSR1	= PSR321	; For compatibility
                                 ;.equ	PSR2	= PSR321	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM30	= WGM30	; For compatibility
                                 .equ	WGM31	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM31	= WGM31	; For compatibility
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Comparet Ouput Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 3A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Clock Select 3 bit 0
                                 .equ	CS31	= 1	; Clock Select 3 bit 1
                                 .equ	CS32	= 2	; Clock Select3 bit 2
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	CTC30	= WGM32	; For compatibility
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	CTC31	= WGM33	; For compatibility
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3  Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare for channel C
                                 .equ	FOC3B	= 6	; Force Output Compare for channel B
                                 .equ	FOC3A	= 7	; Force Output Compare for channel A
                                 
                                 ; TCNT3L - Timer/Counter3 Low Byte
                                 .equ	TCN3L0	= 0	; Timer/Counter 3 bit 0
                                 .equ	TCN3L1	= 1	; Timer/Counter 3 bit 1
                                 .equ	TCN3L2	= 2	; Timer/Counter 3 bit 2
                                 .equ	TCN3L3	= 3	; Timer/Counter 3 bit 3
                                 .equ	TCN3L4	= 4	; Timer/Counter 3 bit 4
                                 .equ	TCN3L5	= 5	; Timer/Counter 3 bit 5
                                 .equ	TCN3L6	= 6	; Timer/Counter 3 bit 6
                                 .equ	TCN3L7	= 7	; Timer/Counter 3 bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADFR	= 5	; ADC  Free Running Select
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	WDTON	= 0	; Watchdog timer always on
                                 .equ	M103C	= 1	; ATmega103 compatibility mode
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0xffff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 4096
                                 .equ	RAMEND	= 0x10ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 131072
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 4096
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xf000
                                 .equ	NRWW_STOP_ADDR	= 0xffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xefff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0xfe00
                                 .equ	SECONDBOOTSTART	= 0xfc00
                                 .equ	THIRDBOOTSTART	= 0xf800
                                 .equ	FOURTHBOOTSTART	= 0xf000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	OC2addr	= 0x0012	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0014	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0016	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0018	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x001a	; Timer/Counter Compare Match B
                                 .equ	OVF1addr	= 0x001c	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x001e	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0020	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0024	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0026	; USART0 Data Register Empty
                                 .equ	UTXC0addr	= 0x0028	; USART0, Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	OC1Caddr	= 0x0030	; Timer/Counter1 Compare Match C
                                 .equ	ICP3addr	= 0x0032	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0034	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0036	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0038	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x003a	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x003c	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x003e	; USART1, Data Register Empty
                                 .equ	UTXC1addr	= 0x0040	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x0042	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0044	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 70	; size in words
                                 
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;*	Source code for Lab 4 modeled from skeleton code
                                 ;*
                                 ;*	 Author: Ben Warren
                                 ;*	   Date: 10/28/2022
                                 ;*
                                 ;***********************************************************
                                 
                                 .include "m128def.inc"			; Include definition file
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;***********************************************************
                                 ;*	Internal Register Definitions and Constants
                                 ;***********************************************************
                                 .def	mpr = r16				; Multipurpose register
                                 .def	rlo = r0				; Low byte of MUL result
                                 .def	rhi = r1				; High byte of MUL result
                                 .def	zero = r2				; Zero register, set to zero in INIT, useful for calculations
                                 .def	A = r3					; A variable
                                 .def	B = r4					; Another variable
                                 .def	oloop = r17				; Outer Loop Counter
                                 .def	iloop = r18				; Inner Loop Counter
                                 
                                 
                                 ;***********************************************************
                                 ;*	Start of Code Segment
                                 ;***********************************************************
                                 .cseg							; Beginning of code segment
                                 
                                 ;-----------------------------------------------------------
                                 ; Interrupt Vectors
                                 ;-----------------------------------------------------------
                                 .org	$0000					; Beginning of IVs
000000 c055                      		rjmp 	INIT			; Reset interrupt
                                 
                                 .org	$0056					; End of Interrupt Vectors
                                 
                                 ;-----------------------------------------------------------
                                 ; Program Initialization
                                 ;-----------------------------------------------------------
                                 INIT:								; The initialization routine
000056 ef0f                      		ldi		mpr, low(RAMEND)	; initialize Stack Pointer
000057 bf0d                      		out		SPL, mpr
000058 e100                      		ldi		mpr, high(RAMEND)
000059 bf0e                      		out		SPH, mpr
                                 
00005a 2422                      		clr		zero			; Set the zero register to zero, maintain
                                 										; these semantics, meaning, don't
                                 										; load anything else into it.
                                 
                                 ;-----------------------------------------------------------
                                 ; Main Program
                                 ;-----------------------------------------------------------
                                 MAIN:							; The Main program
                                 
                                 		; Call function to load ADD16 operands
00005b d010                      		rcall loadADD16
00005c 0000                      		nop ; Check load ADD16 operands (Set Break point here #1)
                                 
                                 		; Call ADD16 function to display its results (calculate FCBA + FFFF)
00005d d01f                      		rcall ADD16
00005e 0000                      		nop ; Check ADD16 result (Set Break point here #2)
                                 
                                 		; Call function to load SUB16 operands
00005f d048                      		rcall loadSUB16
000060 0000                      		nop ; Check load SUB16 operands (Set Break point here #3)
                                 
                                 		; Call SUB16 function to display its results (calculate FCB9 - E420)
000061 d057                      		rcall SUB16
000062 0000                      		nop ; Check SUB16 result (Set Break point here #4)
                                 
                                 
                                 		; Call function to load MUL24 operands
000063 d07e                      		rcall loadMUL24
000064 0000                      		nop ; Check load MUL24 operands (Set Break point here #5)
                                 
                                 		; Call MUL24 function to display its results (calculate FFFFFF * FFFFFF)
000065 d093                      		rcall MUL24
000066 0000                      		nop ; Check MUL24 result (Set Break point here #6)
                                 
                                 		; Setup the COMPOUND function direct test
000067 d0cb                      		rcall loadCOMPOUND
000068 0000                      		nop ; Check load COMPOUND operands (Set Break point here #7)
                                 
                                 		; Call the COMPOUND function
000069 d0e1                      		rcall COMPOUND
00006a 0000                      		nop ; Check COMPOUND result (Set Break point here #8)
                                 
00006b cfff                      DONE:	rjmp	DONE			; Create an infinite while loop to signify the
                                 								; end of the program.
                                 
                                 ;***********************************************************
                                 ;*	Functions and Subroutines
                                 ;***********************************************************
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: loadADD16
                                 ; Desc: Loads operands from program memory to data memory
                                 ;       to be used in the ADD16 funcion
                                 ;-----------------------------------------------------------
                                 loadADD16:
                                 
00006c ebe2                      		ldi	ZL, low(OperandA<<1)	; Load LSB of first operand 
00006d e0f3                      		ldi	ZH, high(OperandA<<1)	; Load MSB of first operand
00006e e1a0                      		ldi XL, low(ADD16_OP1)		; Load LSB of mem location to store first operand
00006f e0b1                      		ldi XH, high(ADD16_OP1)		; Load MSB of mem location to store first operand
000070 9105                      		lpm mpr, Z+					; Load first byte of first operand into data memory
000071 930d                      		st  X+, mpr			
000072 9104                      		lpm mpr, Z					; Load second byte of first operand into data memory
000073 930c                      		st  X, mpr
000074 ebe4                      		ldi	ZL, low(OperandB<<1)	; Load LSB of second operand 
000075 e0f3                      		ldi	ZH, high(OperandB<<1)   ; Load MSB of second operand 
000076 e1c2                      		ldi YL, low(ADD16_OP2)		; Load LSB of mem location to store second operand
000077 e0d1                      		ldi YH, high(ADD16_OP2)		; Load MSB of mem location to store second operand
000078 9105                      		lpm mpr, Z+					; Load first byte of second operand into data memory
000079 9309                      		st  Y+, mpr
00007a 9104                      		lpm mpr, Z					; Load second byte of second operand into data memory
00007b 8308                      		st  Y, mpr
                                 
00007c 9508                      		ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: ADD16
                                 ; Desc: Adds two 16-bit numbers and generates a 24-bit number
                                 ;       where the high byte of the result contains the carry
                                 ;       out bit.
                                 ;-----------------------------------------------------------
                                 ADD16:
00007d 923f                      		push 	A				; Save A register
00007e 924f                      		push	B				; Save B register
00007f 921f                      		push	rhi				; Save rhi register
000080 920f                      		push	rlo				; Save rlo register
000081 922f                      		push	zero			; Save zero register
000082 93bf                      		push	XH				; Save X-ptr
000083 93af                      		push	XL
000084 93df                      		push	YH				; Save Y-ptr
000085 93cf                      		push	YL
000086 93ff                      		push	ZH				; Save Z-ptr
000087 93ef                      		push	ZL
000088 931f                      		push	oloop			; Save counters
000089 932f                      		push	iloop
                                 
                                 		; Load beginning address of first operand into X
00008a e1a0                      		ldi		XL, low(ADD16_OP1)	; Load low byte of address
00008b e0b1                      		ldi		XH, high(ADD16_OP1)	; Load high byte of address
                                 
                                 		; Load beginning address of second operand into Y
00008c e1c2                      		ldi		YL, low(ADD16_OP2)	; Load low byte of address
00008d e0d1                      		ldi		YH, high(ADD16_OP2)	; Load high byte of address
                                 		
                                 		; Load beginning address of result into Z
00008e e2e0                      		ldi		ZL, low(ADD16_Result)	; Load low byte of address
00008f e0f1                      		ldi		ZH, high(ADD16_Result)	; Load high byte of address
                                 
                                 		; Execute the function
000090 903d                      		ld		A, X+					; Load first byte of first operand into A variable
000091 9049                      		ld		B, Y+					; Load first byte of second operand into B variable
000092 0c43                      		add		B, A					; Perform the add operation for the first bytes
000093 9241                      		st		Z+, B					; Store result
000094 903c                      		ld		A, X					; Repeat above operation, but with carry bit on second bytes
000095 8048                      		ld		B, Y
000096 1c43                      		adc		B, A
000097 9241                      		st		Z+, B
000098 f408                      		brcc	EXIT					; Exit if no carry
000099 83b0                      		st		Z, XH					; Else add th carry in and then exit
                                 
00009a 912f                      EXIT:	pop		iloop			; Restore all registers in reverves order
00009b 911f                      		pop		oloop
00009c 91ef                      		pop		ZL
00009d 91ff                      		pop		ZH
00009e 91cf                      		pop		YL
00009f 91df                      		pop		YH
0000a0 91af                      		pop		XL
0000a1 91bf                      		pop		XH
0000a2 902f                      		pop		zero
0000a3 900f                      		pop		rlo
0000a4 901f                      		pop		rhi
0000a5 904f                      		pop		B
0000a6 903f                      		pop		A
0000a7 9508                      		ret						; End a function with RET
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: loadSUB16
                                 ; Desc: Loads operands from program memory to data memory
                                 ;       to be used in the SUB16 funcion
                                 ;-----------------------------------------------------------
                                 loadSUB16:
                                 
0000a8 ebe6                      		ldi	ZL, low(OperandC<<1)	; Load LSB of first operand 
0000a9 e0f3                      		ldi	ZH, high(OperandC<<1)	; Load MSB of first operand
0000aa e3a0                      		ldi XL, low(SUB16_OP1)		; Load LSB of mem location to store first operand
0000ab e0b1                      		ldi XH, high(SUB16_OP1)		; Load MSB of mem location to store first operand
0000ac 9105                      		lpm mpr, Z+					; Load first byte of first operand into data memory
0000ad 930d                      		st  X+, mpr			
0000ae 9104                      		lpm mpr, Z					; Load second byte of first operand into data memory
0000af 930c                      		st  X, mpr
0000b0 ebe8                      		ldi	ZL, low(OperandD<<1)	; Load LSB of second operand 
0000b1 e0f3                      		ldi	ZH, high(OperandD<<1)   ; Load MSB of second operand 
0000b2 e3c2                      		ldi YL, low(SUB16_OP2)		; Load LSB of mem location to store second operand
0000b3 e0d1                      		ldi YH, high(SUB16_OP2)		; Load MSB of mem location to store second operand
0000b4 9105                      		lpm mpr, Z+					; Load first byte of second operand into data memory
0000b5 9309                      		st  Y+, mpr
0000b6 9104                      		lpm mpr, Z					; Load second byte of second operand into data memory
0000b7 8308                      		st  Y, mpr
                                 
0000b8 9508                      		ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: SUB16
                                 ; Desc: Subtracts two 16-bit numbers and generates a 16-bit
                                 ;       result. Always subtracts from the bigger values.
                                 ;-----------------------------------------------------------
                                 SUB16:
0000b9 923f                      		push 	A				; Save A register
0000ba 924f                      		push	B				; Save B register
0000bb 921f                      		push	rhi				; Save rhi register
0000bc 920f                      		push	rlo				; Save rlo register
0000bd 922f                      		push	zero			; Save zero register
0000be 93bf                      		push	XH				; Save X-ptr
0000bf 93af                      		push	XL
0000c0 93df                      		push	YH				; Save Y-ptr
0000c1 93cf                      		push	YL
0000c2 93ff                      		push	ZH				; Save Z-ptr
0000c3 93ef                      		push	ZL
0000c4 931f                      		push	oloop			; Save counters
0000c5 932f                      		push	iloop
                                 
                                 		; Load beginning address of first operand into X
0000c6 e3a0                      		ldi		XL, low(SUB16_OP1)	; Load low byte of address
0000c7 e0b1                      		ldi		XH, high(SUB16_OP1)	; Load high byte of address
                                 
                                 		; Load beginning address of second operand into Y
0000c8 e3c2                      		ldi		YL, low(SUB16_OP2)	; Load low byte of address
0000c9 e0d1                      		ldi		YH, high(SUB16_OP2)	; Load high byte of address
                                 		; Load beginning address of result into Z
0000ca e4e0                      		ldi		ZL, low(SUB16_Result)	; Load low byte of address
0000cb e0f1                      		ldi		ZH, high(SUB16_Result)	; Load high byte of address
                                 
                                 		; Execute the function
0000cc 903d                      		ld		A, X+					; Load first byte of first operand into A variable
0000cd 9049                      		ld		B, Y+					; Load first byte of second operand into B variable
0000ce 1834                      		sub		A, B					; Perform the add operation for the first bytes
0000cf 9231                      		st		Z+, A					; Store result
0000d0 903c                      		ld		A, X					; Repeat above operation on second bytes
0000d1 8048                      		ld		B, Y
0000d2 1834                      		sub		A, B
0000d3 9231                      		st		Z+, A
                                 
0000d4 912f                      		pop		iloop			; Restore all registers in reverves order
0000d5 911f                      		pop		oloop
0000d6 91ef                      		pop		ZL
0000d7 91ff                      		pop		ZH
0000d8 91cf                      		pop		YL
0000d9 91df                      		pop		YH
0000da 91af                      		pop		XL
0000db 91bf                      		pop		XH
0000dc 902f                      		pop		zero
0000dd 900f                      		pop		rlo
0000de 901f                      		pop		rhi
0000df 904f                      		pop		B
0000e0 903f                      		pop		A
                                 
0000e1 9508                      		ret						; End a function with RET
                                 
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: loadMUL24
                                 ; Desc: Loads operands from program memory to data memory
                                 ;       to be used in the MUL24 funcion
                                 ;-----------------------------------------------------------
                                 loadMUL24:
                                 
0000e2 ebea                      		ldi	ZL, low(OperandE1<<1)	; Load LSB of first operand 
0000e3 e0f3                      		ldi	ZH, high(OperandE1<<1)	; Load the middle byte of first operand
0000e4 e5a0                      		ldi XL, low(MUL24_OP1)		; Load LSB of mem location to store first operand
0000e5 e0b1                      		ldi XH, high(MUL24_OP1)		; Load the middle byte of mem location to store first operand
0000e6 9105                      		lpm mpr, Z+					; Load first byte of first operand into data memory
0000e7 930d                      		st  X+, mpr			
0000e8 9104                      		lpm mpr, Z					; Load second byte of first operand into data memory
0000e9 930d                      		st  X+, mpr
0000ea ebec                      		ldi	ZL, low(OperandE2<<1)	; Load highest byte of first operand 
0000eb 9104                      		lpm mpr, Z					; Load highest byte of first operand into data memory
0000ec 930c                      		st  X, mpr
                                 
0000ed ebee                      		ldi	ZL, low(OperandF1<<1)	; Load LSB of first operand 
0000ee e0f3                      		ldi	ZH, high(OperandF1<<1)	; Load the middle byte of first operand
0000ef e5c3                      		ldi YL, low(MUL24_OP2)		; Load LSB of mem location to store first operand
0000f0 e0d1                      		ldi YH, high(MUL24_OP2)		; Load the middle byte of mem location to store first operand
0000f1 9105                      		lpm mpr, Z+					; Load first byte of first operand into data memory
0000f2 9309                      		st  Y+, mpr			
0000f3 9104                      		lpm mpr, Z					; Load second byte of first operand into data memory
0000f4 9309                      		st  Y+, mpr
0000f5 ece0                      		ldi	ZL, low(OperandF2<<1)	; Load highest byte of first operand 
0000f6 9104                      		lpm mpr, Z					; Load highest byte of first operand into data memory
0000f7 8308                      		st  Y, mpr
                                 
0000f8 9508                      		ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: MUL24
                                 ; Desc: Multiplies two 24-bit numbers and generates a 48-bit
                                 ;       result.
                                 ;-----------------------------------------------------------
                                 MUL24:
                                 		;* - Simply adopting MUL16 ideas to MUL24 will not give you steady results. You should come up with different ideas.
                                 		; Execute the function here
0000f9 923f                      		push 	A				; Save A register
0000fa 924f                      		push	B				; Save B register
0000fb 921f                      		push	rhi				; Save rhi register
0000fc 920f                      		push	rlo				; Save rlo register
0000fd 922f                      		push	zero			; Save zero register
0000fe 93bf                      		push	XH				; Save X-ptr
0000ff 93af                      		push	XL
000100 93df                      		push	YH				; Save Y-ptr
000101 93cf                      		push	YL
000102 93ff                      		push	ZH				; Save Z-ptr
000103 93ef                      		push	ZL
000104 931f                      		push	oloop			; Save counters
000105 932f                      		push	iloop
                                 
                                 		; Load beginning address of second operand into Y
000106 e5c3                      		ldi		YL, low(MUL24_OP2)	; Load low byte of address
000107 e0d1                      		ldi		YH, high(MUL24_OP2)	; Load high byte of address
                                 		; Load beginning address of result into Z
000108 e6e0                      		ldi		ZL, low(MUL24_Result)	; Load low byte of address
000109 e0f1                      		ldi		ZH, high(MUL24_Result)	; Load high byte of address
                                 
00010a 2422                      		clr		zero			; Maintain zero semantics
                                 
                                 		; Begin outer for loop, 3 loops for looping through 3 bytes of second operand
00010b e013                      		ldi		oloop, 3		; Load counter
                                 MUL24_OLOOP:
                                 		; Set X to beginning address of Operand 1
00010c e5a0                      		ldi		XL, low(MUL24_OP1)	; Load low byte of address
00010d e0b1                      		ldi		XH, high(MUL24_OP1)	; Load high byte of address
                                 
                                 		; Begin inner for loop
00010e e023                      		ldi		iloop, 3		; Load counter, 3 loops for looping through 3 bytes of first operand
                                 MUL24_ILOOP:
00010f 2422                      		clr		zero			; Clear carry on each loop 
000110 903d                      		ld		A, X+			; Get byte of A operand <- load operand 1 first byte
000111 8048                      		ld		B, Y			; Get byte of B operand <- load operand 2 first byte
000112 9c34                      		mul		A,B				; Multiply A and B <- multiply, store in rhi:rlo
000113 9031                      		ld		A, Z+			; Get a result byte from memory <- Get result byte 1
000114 9041                      		ld		B, Z+			; Get the next result byte from memory < - get result byte 2
000115 0c03                      		add		rlo, A			; rlo <= rlo + A <- 
000116 1c14                      		adc		rhi, B			; rhi <= rhi + B + carry
000117 9031                      		ld		A, Z+			; Get a third byte from the result, inc Z
000118 1c32                      		adc		A, zero			; Add carry to A
000119 1c22                      		adc		zero, zero		; Add carry to zero
00011a 8220                      		st		Z, zero			; Store carry 
00011b 9232                      		st		-Z, A			; Store third byte to memory
00011c 9212                      		st		-Z, rhi			; Store second byte to memory
00011d 9202                      		st		-Z, rlo			; Store first byte to memory
00011e 9631                      		adiw	ZH:ZL, 1		; Z <= Z + 1
00011f 952a                      		dec		iloop			; Decrement counter
000120 f771                      		brne	MUL24_ILOOP		; Loop if iLoop != 0
                                 		; End inner for loop
                                 
000121 9732                      		sbiw	ZH:ZL, 2		; Z <= Z - 2 <- Changes for 24 bit, need to go back 2 places
000122 9621                      		adiw	YH:YL, 1		; Y <= Y + 1
000123 951a                      		dec		oloop			; Decrement counter
000124 f739                      		brne	MUL24_OLOOP		; Loop if oLoop != 0
                                 		; End outer for loop
                                 
000125 912f                      		pop		iloop			; Restore all registers in reverves order
000126 911f                      		pop		oloop
000127 91ef                      		pop		ZL
000128 91ff                      		pop		ZH
000129 91cf                      		pop		YL
00012a 91df                      		pop		YH
00012b 91af                      		pop		XL
00012c 91bf                      		pop		XH
00012d 902f                      		pop		zero
00012e 900f                      		pop		rlo
00012f 901f                      		pop		rhi
000130 904f                      		pop		B
000131 903f                      		pop		A
                                 
000132 9508                      		ret						; End a function with RET
                                 
                                 loadCOMPOUND:
                                 ;-----------------------------------------------------------
                                 ; Func: loadCOMPOUND
                                 ; Desc: Loads operands from program memory to data memory
                                 ;       to be used in the COMPOUND funcion
                                 ;-----------------------------------------------------------
000133 ece2                      		ldi	ZL, low(OperandG<<1)	; Load LSB of first SUB operand 
000134 e0f3                      		ldi	ZH, high(OperandG<<1)	; Load MSB of first SUB operand
000135 e3a0                      		ldi XL, low(SUB16_OP1)		; Load LSB of mem location to store first SUB operand
000136 e0b1                      		ldi XH, high(SUB16_OP1)		; Load MSB of mem location to store first SUB operand
000137 9105                      		lpm mpr, Z+					; Load first byte of first operand into data memory
000138 930d                      		st  X+, mpr			
000139 9104                      		lpm mpr, Z					; Load second byte of first SUB operand into data memory
00013a 930c                      		st  X, mpr
00013b ece4                      		ldi	ZL, low(OperandH<<1)	; Load LSB of second SUB operand 
00013c e0f3                      		ldi	ZH, high(OperandH<<1)   ; Load MSB of second SUB operand 
00013d e3c2                      		ldi YL, low(SUB16_OP2)		; Load LSB of mem location to store second SUB operand
00013e e0d1                      		ldi YH, high(SUB16_OP2)		; Load MSB of mem location to store second SUB operand
00013f 9105                      		lpm mpr, Z+					; Load first byte of second SUB operand into data memory
000140 9309                      		st  Y+, mpr
000141 9104                      		lpm mpr, Z					; Load second byte of second SUB operand into data memory
000142 8308                      		st  Y, mpr
                                 
                                 		;First ADD operand is the SUB16_Result loaded after operation
000143 ece6                      		ldi	ZL, low(OperandI<<1)	; Load LSB of second ADD operand 
000144 e0f3                      		ldi	ZH, high(OperandI<<1)   ; Load MSB of second ADD operand 
000145 e1c2                      		ldi YL, low(ADD16_OP2)		; Load LSB of mem location to store second ADD operand
000146 e0d1                      		ldi YH, high(ADD16_OP2)		; Load MSB of mem location to store second ADD operand
000147 9105                      		lpm mpr, Z+					; Load first byte of second ADD operand into data memory
000148 9309                      		st  Y+, mpr
000149 9104                      		lpm mpr, Z					; Load second byte of second ADD operand into data memory
00014a 8308                      		st  Y, mpr
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: COMPOUND
                                 ; Desc: Computes the compound expression ((G - H) + I)^2
                                 ;       by making use of SUB16, ADD16, and MUL24.
                                 ;
                                 ;       D, E, and F are declared in program memory, and must
                                 ;       be moved into data memory for use as input operands.
                                 ;
                                 ;       All result bytes should be cleared before beginning.
                                 ;-----------------------------------------------------------
                                 COMPOUND:
00014b 923f                      		push 	A				; Save A register
00014c 924f                      		push	B				; Save B register
00014d 921f                      		push	rhi				; Save rhi register
00014e 920f                      		push	rlo				; Save rlo register
00014f 922f                      		push	zero			; Save zero register
000150 93bf                      		push	XH				; Save X-ptr
000151 93af                      		push	XL
000152 93df                      		push	YH				; Save Y-ptr
000153 93cf                      		push	YL
000154 93ff                      		push	ZH				; Save Z-ptr
000155 93ef                      		push	ZL
000156 931f                      		push	oloop			; Save counters
000157 932f                      		push	iloop
                                 
                                 		; Load beginning address of first operand into X
000158 e3a2                      		ldi		XL, low(SUB16_OP2)	; Load low byte of address
000159 e0b1                      		ldi		XH, high(SUB16_OP2)	; Load high byte of address
                                 
                                 		; Load beginning address of second operand into Y
00015a e3c0                      		ldi		YL, low(SUB16_OP1)	; Load low byte of address
00015b e0d1                      		ldi		YH, high(SUB16_OP1)	; Load high byte of address
                                 
                                 		; Load beginning address of result into Z
00015c e4e0                      		ldi		ZL, low(SUB16_Result)	; Load low byte of address
00015d e0f1                      		ldi		ZH, high(SUB16_Result)	; Load high byte of address
                                 
                                 		; Execute the function
00015e 903d                      		ld		A, X+					; Load first byte of first operand into A variable
00015f 9049                      		ld		B, Y+					; Load first byte of second operand into B variable
000160 1843                      		sub		B, A					; Perform the add operation for the first bytes
000161 9241                      		st		Z+, B					; Store result
000162 903c                      		ld		A, X					; Repeat above operation on second bytes
000163 8048                      		ld		B, Y
000164 1843                      		sub		B, A
000165 9241                      		st		Z+, B
                                 
                                 		; Setup the ADD16 function with SUB16 result and operand I
                                 		; Load beginning address of SUB16_Result operand into X
000166 e4a0                      		ldi		XL, low(SUB16_Result)
000167 e0b1                      		ldi		XH, high(SUB16_Result)
                                 		; Load beginning address of second ADD operand into Y
000168 e1c2                      		ldi		YL, low(ADD16_OP2)	; Load low byte of address
000169 e0d1                      		ldi		YH, high(ADD16_OP2)	; Load high byte of address
                                 		
                                 		; Load beginning address of ADD result into Z
00016a e2e0                      		ldi		ZL, low(ADD16_Result)	; Load low byte of address
00016b e0f1                      		ldi		ZH, high(ADD16_Result)	; Load high byte of address
                                 
                                 		; Execute the function
00016c 903d                      		ld		A, X+					; Load first byte of first operand into A variable
00016d 9049                      		ld		B, Y+					; Load first byte of second operand into B variable
00016e 0c43                      		add		B, A					; Perform the add operation for the first bytes
00016f 9241                      		st		Z+, B					; Store result
000170 903c                      		ld		A, X					; Repeat above operation, but with carry bit on second bytes
000171 8048                      		ld		B, Y
000172 1c43                      		adc		B, A
000173 9241                      		st		Z+, B
000174 f408                      		brcc	EXIT1					; Exit if no carry
000175 83b0                      		st		Z, XH					; Else add th carry in and then exit
                                 
                                 EXIT1:
                                 		; Load beginning address of ADD result into Y
000176 e2c0                      		ldi		YL, low(ADD16_Result)	; Load low byte of address
000177 e0d1                      		ldi		YH, high(ADD16_Result)	; Load high byte of address
                                 		; Load beginning address of result into Z
000178 e7e0                      		ldi		ZL, low(COMPOUND_Result)	; Load low byte of address
000179 e0f1                      		ldi		ZH, high(COMPOUND_Result)	; Load high byte of address
                                 
                                 		; Maintain zero semantics
00017a 2422                      		clr		zero	
                                 				
                                 		; Begin outer for loop, 3 loops for looping through 3 bytes of second operand
00017b e013                      		ldi		oloop, 3		; Load counter
                                 MUL24_OLOOP1:
                                 		; Load beginning address of ADD result into X
00017c e2a0                      		ldi		XL, low(ADD16_Result)	; Load low byte of address
00017d e0b1                      		ldi		XH, high(ADD16_Result)	; Load high byte of address
                                 
                                 		; Begin inner for loop
00017e e023                      		ldi		iloop, 3		; Load counter, 3 loops for looping through 3 bytes of first operand
                                 MUL24_ILOOP1:
00017f 2422                      		clr		zero			; Clear carry on each loop
000180 903d                      		ld		A, X+			; Get byte of A operand <- load operand 1 first byte
000181 8048                      		ld		B, Y			; Get byte of B operand <- load operand 2 first byte
000182 9c34                      		mul		A,B				; Multiply A and B <- multiply, store in rhi:rlo
000183 9031                      		ld		A, Z+			; Get a result byte from memory <- Get result byte 1
000184 9041                      		ld		B, Z+			; Get the next result byte from memory < - get result byte 2
000185 0c03                      		add		rlo, A			; rlo <= rlo + A <- 
000186 1c14                      		adc		rhi, B			; rhi <= rhi + B + carry
000187 9031                      		ld		A, Z+			; Get a third byte from the result, inc Z
000188 1c32                      		adc		A, zero			; Add carry to A
000189 8230                      		st		Z, A			; Store third byte to memory
00018a 9212                      		st		-Z, rhi			; Store second byte to memory
00018b 9202                      		st		-Z, rlo			; Store first byte to memory
00018c 9631                      		adiw	ZH:ZL, 1		; Z <= Z + 1
00018d 952a                      		dec		iloop			; Decrement counter
00018e f781                      		brne	MUL24_ILOOP1		; Loop if iLoop != 0
                                 		; End inner for loop
                                 
00018f 9732                      		sbiw	ZH:ZL, 2		; Z <= Z - 2 <- Changes for 24 bit, need to go back 2 places
000190 9621                      		adiw	YH:YL, 1		; Y <= Y + 1
000191 951a                      		dec		oloop			; Decrement counter
000192 f749                      		brne	MUL24_OLOOP1	; Loop if oLoop != 0
                                 		; End outer for loop
                                 		
000193 912f                      		pop		iloop			; Restore all registers in reverves order
000194 911f                      		pop		oloop
000195 91ef                      		pop		ZL
000196 91ff                      		pop		ZH
000197 91cf                      		pop		YL
000198 91df                      		pop		YH
000199 91af                      		pop		XL
00019a 91bf                      		pop		XH
00019b 902f                      		pop		zero
00019c 900f                      		pop		rlo
00019d 901f                      		pop		rhi
00019e 904f                      		pop		B
00019f 903f                      		pop		A
                                 
0001a0 9508                      		ret						; End a function with RET
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: MUL16
                                 ; Desc: An example function that multiplies two 16-bit numbers
                                 ;       A - Operand A is gathered from address $0101:$0100
                                 ;       B - Operand B is gathered from address $0103:$0102
                                 ;       Res - Result is stored in address
                                 ;             $0107:$0106:$0105:$0104
                                 ;       You will need to make sure that Res is cleared before
                                 ;       calling this function.
                                 ;-----------------------------------------------------------
                                 MUL16:
0001a1 923f                      		push 	A				; Save A register
0001a2 924f                      		push	B				; Save B register
0001a3 921f                      		push	rhi				; Save rhi register
0001a4 920f                      		push	rlo				; Save rlo register
0001a5 922f                      		push	zero			; Save zero register
0001a6 93bf                      		push	XH				; Save X-ptr
0001a7 93af                      		push	XL
0001a8 93df                      		push	YH				; Save Y-ptr
0001a9 93cf                      		push	YL
0001aa 93ff                      		push	ZH				; Save Z-ptr
0001ab 93ef                      		push	ZL
0001ac 931f                      		push	oloop			; Save counters
0001ad 932f                      		push	iloop
                                 
0001ae 2422                      		clr		zero			; Maintain zero semantics
                                 
                                 		; Set Y to beginning address of B
0001af e0c2                      		ldi		YL, low(addrB)	; Load low byte
0001b0 e0d1                      		ldi		YH, high(addrB)	; Load high byte
                                 
                                 		; Set Z to begginning address of resulting Product
0001b1 e0e4                      		ldi		ZL, low(LAddrP)	; Load low byte
0001b2 e0f1                      		ldi		ZH, high(LAddrP); Load high byte
                                 
                                 		; Begin outer for loop
0001b3 e012                      		ldi		oloop, 2		; Load counter
                                 MUL16_OLOOP:
                                 		; Set X to beginning address of A
0001b4 e0a0                      		ldi		XL, low(addrA)	; Load low byte
0001b5 e0b1                      		ldi		XH, high(addrA)	; Load high byte
                                 
                                 		; Begin inner for loop
0001b6 e022                      		ldi		iloop, 2		; Load counter
                                 MUL16_ILOOP:
0001b7 903d                      		ld		A, X+			; Get byte of A operand
0001b8 8048                      		ld		B, Y			; Get byte of B operand
0001b9 9c34                      		mul		A,B				; Multiply A and B
0001ba 9031                      		ld		A, Z+			; Get a result byte from memory
0001bb 9041                      		ld		B, Z+			; Get the next result byte from memory
0001bc 0c03                      		add		rlo, A			; rlo <= rlo + A
0001bd 1c14                      		adc		rhi, B			; rhi <= rhi + B + carry
0001be 8030                      		ld		A, Z			; Get a third byte from the result
0001bf 1c32                      		adc		A, zero			; Add carry to A
0001c0 8230                      		st		Z, A			; Store third byte to memory
0001c1 9212                      		st		-Z, rhi			; Store second byte to memory
0001c2 9202                      		st		-Z, rlo			; Store first byte to memory
0001c3 9631                      		adiw	ZH:ZL, 1		; Z <= Z + 1
0001c4 952a                      		dec		iloop			; Decrement counter
0001c5 f789                      		brne	MUL16_ILOOP		; Loop if iLoop != 0
                                 		; End inner for loop
                                 
0001c6 9731                      		sbiw	ZH:ZL, 1		; Z <= Z - 1
0001c7 9621                      		adiw	YH:YL, 1		; Y <= Y + 1
0001c8 951a                      		dec		oloop			; Decrement counter
0001c9 f751                      		brne	MUL16_OLOOP		; Loop if oLoop != 0
                                 		; End outer for loop
                                 
0001ca 912f                      		pop		iloop			; Restore all registers in reverves order
0001cb 911f                      		pop		oloop
0001cc 91ef                      		pop		ZL
0001cd 91ff                      		pop		ZH
0001ce 91cf                      		pop		YL
0001cf 91df                      		pop		YH
0001d0 91af                      		pop		XL
0001d1 91bf                      		pop		XH
0001d2 902f                      		pop		zero
0001d3 900f                      		pop		rlo
0001d4 901f                      		pop		rhi
0001d5 904f                      		pop		B
0001d6 903f                      		pop		A
0001d7 9508                      		ret						; End a function with RET
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: Template function header
                                 ; Desc: Cut and paste this and fill in the info at the
                                 ;       beginning of your functions
                                 ;-----------------------------------------------------------
                                 FUNC:							; Begin a function with a label
                                 		; Save variable by pushing them to the stack
                                 
                                 		; Execute the function here
                                 
                                 		; Restore variable by popping them from the stack in reverse order
0001d8 9508                      		ret						; End a function with RET
                                 
                                 
                                 ;***********************************************************
                                 ;*	Stored Program Data
                                 ;*	Do not edit section.
                                 ;***********************************************************
                                 ; ADD16 operands
                                 OperandA:
0001d9 fcba                      	.DW 0xFCBA
                                 OperandB:
0001da ffff                      	.DW 0xFFFF
                                 
                                 ; SUB16 operands
                                 OperandC:
0001db fcb9                      	.DW 0XFCB9
                                 OperandD:
0001dc e420                      	.DW 0XE420
                                 
                                 ; MUL24 operands
                                 OperandE1:
0001dd ffff                      	.DW	0XFFFF
                                 OperandE2:
0001de 00ff                      	.DW	0X00FF
                                 OperandF1:
0001df ffff                      	.DW	0XFFFF
                                 OperandF2:
0001e0 00ff                      	.DW	0X00FF
                                 
                                 ; Compoud operands
                                 OperandG:
0001e1 fcba                      	.DW	0xFCBA				; test value for operand G
                                 OperandH:
0001e2 2022                      	.DW	0x2022				; test value for operand H
                                 OperandI:
0001e3 21bb                      	.DW	0x21BB				; test value for operand I
                                 
                                 ;***********************************************************
                                 ;*	Data Memory Allocation
                                 ;***********************************************************
                                 .dseg
                                 .org	$0100				; data memory allocation for MUL16 example
000100                           addrA:	.byte 2
000102                           addrB:	.byte 2
000104                           LAddrP:	.byte 4
                                 
                                 ; Below is an example of data memory allocation for ADD16.
                                 ; Consider using something similar for SUB16 and MUL24.
                                 .org	$0110				; data memory allocation for operands
                                 ADD16_OP1:
000110                           		.byte 2				; allocate two bytes for first operand of ADD16
                                 ADD16_OP2:
000112                           		.byte 2				; allocate two bytes for second operand of ADD16
                                 
                                 .org	$0120				; data memory allocation for results
                                 ADD16_Result:
000120                           		.byte 3				; allocate three bytes for ADD16 result
                                 
                                 .org	$0130				; data memory allocation for operands
                                 SUB16_OP1:
000130                           		.byte 2				; allocate two bytes for first operand of SUB16
                                 SUB16_OP2:
000132                           		.byte 2				; allocate two bytes for second operand of SUB16
                                 
                                 .org	$0140				; data memory allocation for results
                                 SUB16_Result:
000140                           		.byte 2				; allocate three bytes for SUB16 result
                                 
                                 .org	$0150				; data memory allocation for operands
                                 MUL24_OP1:
000150                           		.byte 3				; allocate two bytes for first operand of MUL24
                                 MUL24_OP2:
000153                           		.byte 3				; allocate two bytes for second operand of MUL24
                                 
                                 .org	$0160				; data memory allocation for results
                                 MUL24_Result:
000160                           		.byte 6				; allocate six bytes for MUL24 result
                                 
                                 .org	$0170				; data memory allocation for results
                                 COMPOUND_Result:
000170                           		.byte 6				; allocate six bytes for MUL24 result
                                 
                                 ;***********************************************************
                                 ;*	Additional Program Includes
                                 ;***********************************************************
                                 ; There are no additional file includes for this program


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega128" register use summary:
x  :  20 y  :  22 z  :  49 r0 :  16 r1 :  16 r2 :  22 r3 :  49 r4 :  44 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  44 r17:  16 r18:  16 r19:   0 r20:   0 
r21:   0 r22:   0 r23:   0 r24:   0 r25:   0 r26:  21 r27:  23 r28:  25 
r29:  25 r30:  34 r31:  32 
Registers used: 17 out of 35 (48.6%)

"ATmega128" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   9 add   :   5 adiw  :   6 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   6 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   6 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   0 cpse  :   0 dec   :   6 elpm  :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   0 
jmp   :   0 ld    :  31 ldd   :   0 ldi   :  88 lds   :   0 lpm   :  31 
lsl   :   0 lsr   :   0 mov   :   0 movw  :   0 mul   :   3 muls  :   0 
mulsu :   0 neg   :   0 nop   :   8 or    :   0 ori   :   0 out   :   2 
pop   :  65 push  :  65 rcall :   8 ret   :   9 reti  :   0 rjmp  :   2 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 
sbis  :   0 sbiw  :   3 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  40 std   :   0 
sts   :   0 sub   :   4 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 21 out of 114 (18.4%)

"ATmega128" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003c8    776     22    798  131072   0.6%
[.dseg] 0x000100 0x000176      0     39     39    4096   1.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
