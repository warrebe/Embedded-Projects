
AVRASM ver. 2.2.8  C:\Users\bwarr\Downloads\OSU Fall 2022\ECE 375\Lab7\Lab7\Lab7\Benjamin_Moehring_and_Benjamin_Warren_Lab7_SourceCode.asm Fri Dec 02 15:17:58 2022

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m32U4def.inc'
C:\Users\bwarr\Downloads\OSU Fall 2022\ECE 375\Lab7\Lab7\Lab7\Benjamin_Moehring_and_Benjamin_Warren_Lab7_SourceCode.asm(16): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m32U4def.inc'
C:\Users\bwarr\Downloads\OSU Fall 2022\ECE 375\Lab7\Lab7\Lab7\Benjamin_Moehring_and_Benjamin_Warren_Lab7_SourceCode.asm(618): Including file 'C:\Users\bwarr\Downloads\OSU Fall 2022\ECE 375\Lab7\Lab7\Lab7\LCDDriver.asm'
C:\Users\bwarr\Downloads\OSU Fall 2022\ECE 375\Lab7\Lab7\Lab7\LCDDriver.asm(31): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m32U4def.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m32U4def.inc'
C:\Users\bwarr\Downloads\OSU Fall 2022\ECE 375\Lab7\Lab7\Lab7\Benjamin_Moehring_and_Benjamin_Warren_Lab7_SourceCode.asm(16): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m32U4def.inc'
C:\Users\bwarr\Downloads\OSU Fall 2022\ECE 375\Lab7\Lab7\Lab7\Benjamin_Moehring_and_Benjamin_Warren_Lab7_SourceCode.asm(618): Including file 'C:\Users\bwarr\Downloads\OSU Fall 2022\ECE 375\Lab7\Lab7\Lab7\LCDDriver.asm'
C:\Users\bwarr\Downloads\OSU Fall 2022\ECE 375\Lab7\Lab7\Lab7\LCDDriver.asm(31): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m32U4def.inc'
                                 
                                 ;***********************************************************
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32U4.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32U4def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32U4
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32U4
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32U4DEF_INC_
                                 #define _M32U4DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32U4
                                 #pragma AVRPART ADMIN PART_NAME ATmega32U4
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x87
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	PLLCSR	= 0x29
                                 .equ	PLLFRQ	= 0x32
                                 .equ	UEINT	= 0xf4	; MEMORY MAPPED
                                 .equ	UEBCHX	= 0xf3	; MEMORY MAPPED
                                 .equ	UEBCLX	= 0xf2	; MEMORY MAPPED
                                 .equ	UEDATX	= 0xf1	; MEMORY MAPPED
                                 .equ	UEIENX	= 0xf0	; MEMORY MAPPED
                                 .equ	UESTA1X	= 0xef	; MEMORY MAPPED
                                 .equ	UESTA0X	= 0xee	; MEMORY MAPPED
                                 .equ	UECFG1X	= 0xed	; MEMORY MAPPED
                                 .equ	UECFG0X	= 0xec	; MEMORY MAPPED
                                 .equ	UECONX	= 0xeb	; MEMORY MAPPED
                                 .equ	UERST	= 0xea	; MEMORY MAPPED
                                 .equ	UENUM	= 0xe9	; MEMORY MAPPED
                                 .equ	UEINTX	= 0xe8	; MEMORY MAPPED
                                 .equ	UDMFN	= 0xe6	; MEMORY MAPPED
                                 .equ	UDFNUMH	= 0xe5	; MEMORY MAPPED
                                 .equ	UDFNUML	= 0xe4	; MEMORY MAPPED
                                 .equ	UDADDR	= 0xe3	; MEMORY MAPPED
                                 .equ	UDIEN	= 0xe2	; MEMORY MAPPED
                                 .equ	UDINT	= 0xe1	; MEMORY MAPPED
                                 .equ	UDCON	= 0xe0	; MEMORY MAPPED
                                 .equ	USBINT	= 0xda	; MEMORY MAPPED
                                 .equ	USBSTA	= 0xd9	; MEMORY MAPPED
                                 .equ	USBCON	= 0xd8	; MEMORY MAPPED
                                 .equ	UHWCON	= 0xd7	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ 	TWAMR		= 0xbd	;
                                 .equ  TWCR		= 0xbc	;
                                 .equ 	TWDR		= 0xbb	;
                                 .equ 	TWAR		= 0xba 	;
                                 .equ 	TWSR		= 0xb9	;
                                 .equ 	TWBR		= 0xb8	;
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	RCCTRL	= 0x67	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	DT4	= 0xd4	; MEMORY MAPPED
                                 .equ	OCR4D	= 0xd2	; MEMORY MAPPED
                                 .equ	OCR4C	= 0xd1	; MEMORY MAPPED
                                 .equ	OCR4B	= 0xd0	; MEMORY MAPPED
                                 .equ	OCR4A	= 0xcf	; MEMORY MAPPED
                                 .equ	TCCR4E	= 0xc4	; MEMORY MAPPED
                                 .equ	TCCR4D	= 0xc3	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xc2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xc1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xc0	; MEMORY MAPPED
                                 .equ	TC4H	= 0xbf	; MEMORY MAPPED
                                 .equ	TCNT4	= 0xbe	; MEMORY MAPPED
                                 .equ	CLKSEL1	= 0xc6	; MEMORY MAPPED
                                 .equ	CLKSEL0	= 0xc5	; MEMORY MAPPED
                                 .equ	CLKSTA	= 0xc7	; MEMORY MAPPED
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; DT4 - Timer/Counter 4 Dead Time Value
                                 .equ	DT4L0	= 0	; Timer/Counter 4 Dead Time Value Bit 0
                                 .equ	DT4L1	= 1	; Timer/Counter 4 Dead Time Value Bit 1
                                 .equ	DT4L2	= 2	; Timer/Counter 4 Dead Time Value Bit 2
                                 .equ	DT4L3	= 3	; Timer/Counter 4 Dead Time Value Bit 3
                                 .equ	DT4L4	= 4	; Timer/Counter 4 Dead Time Value Bit 4
                                 .equ	DT4L5	= 5	; Timer/Counter 4 Dead Time Value Bit 5
                                 .equ	DT4L6	= 6	; Timer/Counter 4 Dead Time Value Bit 6
                                 .equ	DT4L7	= 7	; Timer/Counter 4 Dead Time Value Bit 7
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 2	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4B	= 5	; Output Compare Flag 4B
                                 .equ	OCF4A	= 6	; Output Compare Flag 4A
                                 .equ	OCF4D	= 7	; Output Compare Flag 4D
                                 
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 2	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4B	= 5	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4A	= 6	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4D	= 7	; Timer/Counter4 Output Compare D Match Interrupt Enable
                                 
                                 ; OCR4D - Timer/Counter4 Output Compare Register D
                                 .equ	OCR4D0	= 0	; Timer/Counter4 Output Compare Register Low Byte bit 0
                                 .equ	OCR4D1	= 1	; Timer/Counter4 Output Compare Register Low Byte bit 1
                                 .equ	OCR4D2	= 2	; Timer/Counter4 Output Compare Register Low Byte bit 2
                                 .equ	OCR4D3	= 3	; Timer/Counter4 Output Compare Register Low Byte bit 3
                                 .equ	OCR4D4	= 4	; Timer/Counter4 Output Compare Register Low Byte bit 4
                                 .equ	OCR4D5	= 5	; Timer/Counter4 Output Compare Register Low Byte bit 5
                                 .equ	OCR4D6	= 6	; Timer/Counter4 Output Compare Register Low Byte bit 6
                                 .equ	OCR4D7	= 7	; Timer/Counter4 Output Compare Register Low Byte bit 7
                                 
                                 ; OCR4C - Timer/Counter4 Output Compare Register C
                                 .equ	OCR4C0	= 0	; Timer/Counter4 Output Compare Register bit 0
                                 .equ	OCR4C1	= 1	; Timer/Counter4 Output Compare Register bit 1
                                 .equ	OCR4C2	= 2	; Timer/Counter4 Output Compare Register bit 2
                                 .equ	OCR4C3	= 3	; Timer/Counter4 Output Compare Register bit 3
                                 .equ	OCR4C4	= 4	; Timer/Counter4 Output Compare Register bit 4
                                 .equ	OCR4C5	= 5	; Timer/Counter4 Output Compare Register bit 5
                                 .equ	OCR4C6	= 6	; Timer/Counter4 Output Compare Register 6
                                 .equ	OCR4C7	= 7	; Timer/Counter4 Output Compare Register bit 7
                                 
                                 ; OCR4B - Timer/Counter4 Output Compare Register B
                                 .equ	OCR4B0	= 0	; Timer/Counter4 Output Compare Register bit 0
                                 .equ	OCR4B1	= 1	; Timer/Counter4 Output Compare Register bit 1
                                 .equ	OCR4B2	= 2	; Timer/Counter4 Output Compare Register bit 2
                                 .equ	OCR4B3	= 3	; Timer/Counter4 Output Compare Register bit 3
                                 .equ	OCR4B4	= 4	; Timer/Counter4 Output Compare Register bit 4
                                 .equ	OCR4B5	= 5	; Timer/Counter4 Output Compare Register bit 5
                                 .equ	OCR4B6	= 6	; Timer/Counter4 Output Compare Register bit 6
                                 .equ	OCR4B7	= 7	; Timer/Counter4 Output Compare Register bit 7
                                 
                                 ; OCR4A - Timer/Counter4 Output Compare Register A
                                 .equ	OCR4A0	= 0	; Timer/Counter4 Output Compare Register Bit 0
                                 .equ	OCR4A1	= 1	; Timer/Counter4 Output Compare Register Bit 1
                                 .equ	OCR4A2	= 2	; Timer/Counter4 Output Compare Register Low Byte Bit 2
                                 .equ	OCR4A3	= 3	; Timer/Counter4 Output Compare Register Low Byte Bit 3
                                 .equ	OCR4A4	= 4	; Timer/Counter4 Output Compare Register Bit 4
                                 .equ	OCR4A5	= 5	; Timer/Counter4 Output Compare Register Bit 5
                                 .equ	OCR4A6	= 6	; Timer/Counter4 Output Compare Register Bit 6
                                 .equ	OCR4A7	= 7	; Timer/Counter4 Output Compare Register Bit 7
                                 
                                 ; TC4H - Timer/Counter4
                                 .equ	TC48	= 0	; Timer/Counter4 bit 8
                                 .equ	TC49	= 1	; Timer/Counter4 bit 9
                                 .equ	TC410	= 2	; Timer/Counter4 bit 10
                                 
                                 ; TCNT4 - Timer/Counter4 Low Bytes
                                 .equ	TC40	= 0	; Timer/Counter4 bit 0
                                 .equ	TC41	= 1	; Timer/Counter4 bit 1
                                 .equ	TC42	= 2	; Timer/Counter4 bit 2
                                 .equ	TC43	= 3	; Timer/Counter4  bit 3
                                 .equ	TC44	= 4	; Timer/Counter4 bit 4
                                 .equ	TC45	= 5	; Timer/Counter4 bit 5
                                 .equ	TC46	= 6	; Timer/Counter4 bit 6
                                 .equ	TC47	= 7	; Timer/Counter4 bit 7
                                 
                                 ; TCCR4E - Timer/Counter 4 Control Register E
                                 .equ	OC4OE0	= 0	; Output Compare Override Enable bit
                                 .equ	OC4OE1	= 1	; Output Compare Override Enable bit
                                 .equ	OC4OE2	= 2	; Output Compare Override Enable bit
                                 .equ	OC4OE3	= 3	; Output Compare Override Enable bit
                                 .equ	OC4OE4	= 4	; Output Compare Override Enable bit
                                 .equ	OC4OE5	= 5	; Output Compare Override Enable bit
                                 .equ	ENHC4	= 6	; Enhanced Compare/PWM Mode
                                 .equ	TLOCK4	= 7	; Register Update Lock
                                 
                                 ; TCCR4D - Timer/Counter 4 Control Register D
                                 .equ	WGM40	= 0	; Waveform Generation Mode bits
                                 .equ	WGM41	= 1	; Waveform Generation Mode bits
                                 .equ	FPF4	= 2	; Fault Protection Interrupt Flag
                                 .equ	FPAC4	= 3	; Fault Protection Analog Comparator Enable
                                 .equ	FPES4	= 4	; Fault Protection Edge Select
                                 .equ	FPNC4	= 5	; Fault Protection Noise Canceler
                                 .equ	FPEN4	= 6	; Fault Protection Mode Enable
                                 .equ	FPIE4	= 7	; Fault Protection Interrupt Enable
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	PWM4D	= 0	; Pulse Width Modulator D Enable
                                 .equ	FOC4D	= 1	; Force Output Compare Match 4D
                                 .equ	COM4D0	= 2	; Comparator D Output Mode
                                 .equ	COM4D1	= 3	; Comparator D Output Mode
                                 .equ	COM4B0S	= 4	; Comparator B Output Mode
                                 .equ	COM4B1S	= 5	; Comparator B Output Mode
                                 .equ	COM4A0S	= 6	; Comparator A Output Mode
                                 .equ	COM4A1S	= 7	; Comparator A Output Mode
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Clock Select Bit 0
                                 .equ	CS41	= 1	; Clock Select Bit 1
                                 .equ	CS42	= 2	; Clock Select Bit 2
                                 .equ	CS43	= 3	; Clock Select Bit 3
                                 .equ	DTPS40	= 4	; Dead Time Prescaler Bit 0
                                 .equ	DTPS41	= 5	; Dead Time Prescaler Bit 1
                                 .equ	PSR4	= 6	; Prescaler Reset Timer/Counter 4
                                 .equ	PWM4X	= 7	; PWM Inversion Mode
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	PWM4B	= 0	; 
                                 .equ	PWM4A	= 1	; 
                                 .equ	FOC4B	= 2	; Force Output Compare Match 4B
                                 .equ	FOC4A	= 3	; Force Output Compare Match 4A
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE6	= 6	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE6	= 6	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source 2
                                 .equ	ADTS3	= 4	; ADC Auto Trigger Source 3
                                 .equ	MUX5	= 5	; Analog Channel and Gain Selection Bits
                                 .equ	ADHSM	= 7	; ADC High Speed Mode
                                 
                                 ; DIDR0 - Digital Input Disable Register 1
                                 .equ	ADC0D	= 0	; ADC0 Digital input Disable
                                 .equ	ADC1D	= 1	; ADC1 Digital input Disable
                                 .equ	ADC2D	= 2	; ADC2 Digital input Disable
                                 .equ	ADC3D	= 3	; ADC3 Digital input Disable
                                 .equ	ADC4D	= 4	; ADC4 Digital input Disable
                                 .equ	ADC5D	= 5	; ADC5 Digital input Disable
                                 .equ	ADC6D	= 6	; ADC6 Digital input Disable
                                 .equ	ADC7D	= 7	; ADC7 Digital input Disable
                                 
                                 ; DIDR2 - Digital Input Disable Register 1
                                 .equ	ADC8D	= 0	; ADC8 Digital input Disable
                                 .equ	ADC9D	= 1	; ADC9 Digital input Disable
                                 .equ	ADC10D	= 2	; ADC10 Digital input Disable
                                 .equ	ADC11D	= 3	; ADC11 Digital input Disable
                                 .equ	ADC12D	= 4	; ADC12 Digital input Disable
                                 .equ	ADC13D	= 5	; ADC13 Digital input Disable
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - 
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; RCCTRL - Oscillator Control Register
                                 .equ	RCFREQ	= 0	; 
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRUSB	= 7	; Power Reduction USB
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 ; CLKSTA - 
                                 .equ	EXTON	= 0	; 
                                 .equ	RCON	= 1	; 
                                 
                                 ; CLKSEL0 - 
                                 .equ	CLKS	= 0	; 
                                 .equ	EXTE	= 2	; 
                                 .equ	RCE	= 3	; 
                                 .equ	EXSUT0	= 4	; 
                                 .equ	EXSUT1	= 5	; 
                                 .equ	RCSUT0	= 6	; 
                                 .equ	RCSUT1	= 7	; 
                                 
                                 ; CLKSEL1 - 
                                 .equ	EXCKSEL0	= 0	; 
                                 .equ	EXCKSEL1	= 1	; 
                                 .equ	EXCKSEL2	= 2	; 
                                 .equ	EXCKSEL3	= 3	; 
                                 .equ	RCCKSEL0	= 4	; 
                                 .equ	RCCKSEL1	= 5	; 
                                 .equ	RCCKSEL2	= 6	; 
                                 .equ	RCCKSEL3	= 7	; 
                                 
                                 
                                 ; ***** PLL **************************
                                 ; PLLCSR - PLL Status and Control register
                                 .equ	PLOCK	= 0	; PLL Lock Status Bit
                                 .equ	PLLE	= 1	; PLL Enable Bit
                                 .equ	PINDIV	= 4	; PLL prescaler Bit 2
                                 
                                 ; PLLFRQ - PLL Frequency Control Register
                                 .equ	PDIV0	= 0	; 
                                 .equ	PDIV1	= 1	; 
                                 .equ	PDIV2	= 2	; 
                                 .equ	PDIV3	= 3	; 
                                 .equ	PLLTM0	= 4	; 
                                 .equ	PLLTM1	= 5	; 
                                 .equ	PLLUSB	= 6	; 
                                 .equ	PINMUX	= 7	; 
                                 
                                 
                                 ; ***** USB_DEVICE *******************
                                 ; USBCON - USB General Control Register
                                 .equ	VBUSTE	= 0	; 
                                 .equ	OTGPADE	= 4	; 
                                 .equ	FRZCLK	= 5	; 
                                 .equ	USBE	= 7	; 
                                 
                                 ; UDCON - 
                                 .equ	DETACH	= 0	; 
                                 .equ	RMWKUP	= 1	; 
                                 .equ	LSM	= 2	; USB low speed mode
                                 .equ	RSTCPU	= 3	; 
                                 
                                 ; UDINT - 
                                 .equ	SUSPI	= 0	; 
                                 .equ	SOFI	= 2	; 
                                 .equ	EORSTI	= 3	; 
                                 .equ	WAKEUPI	= 4	; 
                                 .equ	EORSMI	= 5	; 
                                 .equ	UPRSMI	= 6	; 
                                 
                                 ; UDIEN - 
                                 .equ	SUSPE	= 0	; 
                                 .equ	SOFE	= 2	; 
                                 .equ	EORSTE	= 3	; 
                                 .equ	WAKEUPE	= 4	; 
                                 .equ	EORSME	= 5	; 
                                 .equ	UPRSME	= 6	; 
                                 
                                 ; UDADDR - 
                                 .equ	UADD0	= 0	; 
                                 .equ	UADD1	= 1	; 
                                 .equ	UADD2	= 2	; 
                                 .equ	UADD3	= 3	; 
                                 .equ	UADD4	= 4	; 
                                 .equ	UADD5	= 5	; 
                                 .equ	UADD6	= 6	; 
                                 .equ	ADDEN	= 7	; 
                                 
                                 ; UDFNUML - 
                                 .equ	FNUM0	= 0	; 
                                 .equ	FNUM1	= 1	; 
                                 .equ	FNUM2	= 2	; 
                                 .equ	FNUM3	= 3	; 
                                 .equ	FNUM4	= 4	; 
                                 .equ	FNUM5	= 5	; 
                                 .equ	FNUM6	= 6	; 
                                 .equ	FNUM7	= 7	; 
                                 
                                 ; UDFNUMH - 
                                 .equ	FNUM8	= 0	; 
                                 .equ	FNUM9	= 1	; 
                                 .equ	FNUM10	= 2	; 
                                 
                                 ; UDMFN - 
                                 .equ	FNCERR	= 4	; 
                                 
                                 ; UEINTX - 
                                 .equ	TXINI	= 0	; 
                                 .equ	STALLEDI	= 1	; 
                                 .equ	RXOUTI	= 2	; 
                                 .equ	RXSTPI	= 3	; 
                                 .equ	NAKOUTI	= 4	; 
                                 .equ	RWAL	= 5	; 
                                 .equ	NAKINI	= 6	; 
                                 .equ	FIFOCON	= 7	; 
                                 
                                 ; UENUM - 
                                 .equ	UENUM_0	= 0	; 
                                 .equ	UENUM_1	= 1	; 
                                 .equ	UENUM_2	= 2	; 
                                 
                                 ; UERST - 
                                 .equ	EPRST0	= 0	; 
                                 .equ	EPRST1	= 1	; 
                                 .equ	EPRST2	= 2	; 
                                 .equ	EPRST3	= 3	; 
                                 .equ	EPRST4	= 4	; 
                                 .equ	EPRST5	= 5	; 
                                 .equ	EPRST6	= 6	; 
                                 
                                 ; UECONX - 
                                 .equ	EPEN	= 0	; 
                                 .equ	RSTDT	= 3	; 
                                 .equ	STALLRQC	= 4	; 
                                 .equ	STALLRQ	= 5	; 
                                 
                                 ; UECFG0X - 
                                 .equ	EPDIR	= 0	; 
                                 .equ	EPTYPE0	= 6	; 
                                 .equ	EPTYPE1	= 7	; 
                                 
                                 ; UECFG1X - 
                                 .equ	ALLOC	= 1	; 
                                 .equ	EPBK0	= 2	; 
                                 .equ	EPBK1	= 3	; 
                                 .equ	EPSIZE0	= 4	; 
                                 .equ	EPSIZE1	= 5	; 
                                 .equ	EPSIZE2	= 6	; 
                                 
                                 ; UESTA0X - 
                                 .equ	NBUSYBK0	= 0	; 
                                 .equ	NBUSYBK1	= 1	; 
                                 .equ	DTSEQ0	= 2	; 
                                 .equ	DTSEQ1	= 3	; 
                                 .equ	UNDERFI	= 5	; 
                                 .equ	OVERFI	= 6	; 
                                 .equ	CFGOK	= 7	; 
                                 
                                 ; UESTA1X - 
                                 .equ	CURRBK0	= 0	; 
                                 .equ	CURRBK1	= 1	; 
                                 .equ	CTRLDIR	= 2	; 
                                 
                                 ; UEIENX - 
                                 .equ	TXINE	= 0	; 
                                 .equ	STALLEDE	= 1	; 
                                 .equ	RXOUTE	= 2	; 
                                 .equ	RXSTPE	= 3	; 
                                 .equ	NAKOUTE	= 4	; 
                                 .equ	NAKINE	= 6	; 
                                 .equ	FLERRE	= 7	; 
                                 
                                 ; UEDATX - 
                                 .equ	DAT0	= 0	; 
                                 .equ	DAT1	= 1	; 
                                 .equ	DAT2	= 2	; 
                                 .equ	DAT3	= 3	; 
                                 .equ	DAT4	= 4	; 
                                 .equ	DAT5	= 5	; 
                                 .equ	DAT6	= 6	; 
                                 .equ	DAT7	= 7	; 
                                 
                                 ; UEBCLX - 
                                 .equ	BYCT0	= 0	; 
                                 .equ	BYCT1	= 1	; 
                                 .equ	BYCT2	= 2	; 
                                 .equ	BYCT3	= 3	; 
                                 .equ	BYCT4	= 4	; 
                                 .equ	BYCT5	= 5	; 
                                 .equ	BYCT6	= 6	; 
                                 .equ	BYCT7	= 7	; 
                                 
                                 ; UEINT - 
                                 .equ	EPINT0	= 0	; 
                                 .equ	EPINT1	= 1	; 
                                 .equ	EPINT2	= 2	; 
                                 .equ	EPINT3	= 3	; 
                                 .equ	EPINT4	= 4	; 
                                 .equ	EPINT5	= 5	; 
                                 .equ	EPINT6	= 6	; 
                                 
                                 ; USBINT - 
                                 .equ	VBUSTI	= 0	; 
                                 
                                 ; USBSTA - 
                                 .equ	VBUS	= 0	; 
                                 .equ	SPEED	= 3	; 
                                 
                                 ; USBCON - USB General Control Register
                                 ;.equ	VBUSTE	= 0	; 
                                 ;.equ	OTGPADE	= 4	; 
                                 ;.equ	FRZCLK	= 5	; 
                                 ;.equ	USBE	= 7	; 
                                 
                                 ; UHWCON - 
                                 .equ	UVREGE	= 0	; 
                                 
                                 ; TWCR - Two-Wire Interface Control
                                 .equ		TWIE	= 0	;
                                 .equ 		TWEN	= 2	;
                                 .equ 		TWWC	= 3	;
                                 .equ 		TWSTO	= 4	;
                                 .equ 		TWSTA	= 5	;
                                 .equ 		TWEA	= 6	;
                                 .equ 		TWINT	= 7	;
                                 
                                 ; TWSR - Two-Wire Status
                                 .equ 		TWPS0	= 0	;
                                 .equ 		TWPS1	= 1	;
                                 
                                 ; TWAR
                                 .equ 		TWGCE	= 0	;
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Oscillator options
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 .equ	HWBE	= 3	; Hardware Boot Enable
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2560
                                 .equ	RAMEND	= 0x0aff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2560
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	Reserved1addr	= 0x000a	; Reserved1
                                 .equ	Reserved2addr	= 0x000c	; Reserved2
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	Reserved3addr	= 0x0010	; Reserved3
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	USB_GENaddr	= 0x0014	; USB General Interrupt Request
                                 .equ	USB_COMaddr	= 0x0016	; USB Endpoint/Pipe Interrupt Communication Request
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	Reserved4addr	= 0x001a	; Reserved4
                                 .equ	Reserved5addr	= 0x001c	; Reserved5
                                 .equ	Reserved6addr	= 0x001e	; Reserved6
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC1addr	= 0x0032	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x0034	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x0036	; USART1, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	TWIaddr	= 0x0048	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x004a	; Store Program Memory Read
                                 .equ	OC4Aaddr	= 0x004c	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x004e	; Timer/Counter4 Compare Match B
                                 .equ	OC4Daddr	= 0x0050	; Timer/Counter4 Compare Match D
                                 .equ	OVF4addr	= 0x0052	; Timer/Counter4 Overflow
                                 .equ	TIMER4_FPFaddr	= 0x0054	; Timer/Counter4 Fault Protection Interrupt
                                 
                                 .equ	INT_VECTORS_SIZE	= 86	; size in words
                                 
                                 #endif  /* _M32U4DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;*
                                 ;*	This is the TRANSMIT file for Lab 7 of ECE 375
                                 ;*
                                 ;*  	Rock Paper Scissors
                                 ;* 	Requirement:
                                 ;* 	1. USART1 communication
                                 ;* 	2. Timer/counter1 Normal mode to create a 1.5-sec delay
                                 ;***********************************************************
                                 ;*
                                 ;*	 Author: Benjamin Warren and Benjamin Moehring
                                 ;*	   Date: 11/18/2022
                                 ;*
                                 ;***********************************************************
                                 
                                 .include "m32U4def.inc"         ; Include definition file
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32U4.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32U4def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32U4
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32U4
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32U4DEF_INC_
                                 #endif  /* _M32U4DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;***********************************************************
                                 ;*  Internal Register Definitions and Constants
                                 ;***********************************************************
                                 .def    mpr = r16               ; Multi-Purpose Register
                                 .def	waitcnt = r17			; Wait loop counter
                                 .def	ilcnt = r18				; Inner loop counter
                                 .def	olcnt = r19				; outer loop counter
                                 .def	Ready1 = r0				;
                                 .def	Ready2 = r1				;
                                 
                                 .equ	Tx = 2
                                 .equ	Rx = 3
                                 .equ	Start = 7				; PD7 Input
                                 
                                 ; Use this signal code between two boards for their game ready
                                 .equ    SendReady = 0b11111111
                                 
                                 ;***********************************************************
                                 ;*  Start of Code Segment
                                 ;***********************************************************
                                 .cseg                           ; Beginning of code segment
                                 
                                 ;***********************************************************
                                 ;*  Interrupt Vectors
                                 ;***********************************************************
                                 .org    $0000                   ; Beginning of IVs
000000 c055                      	    rjmp    INIT            ; Reset interrupt
                                 
                                 .org	$0032					
000032 c106                      		rjmp	Receive			; Receive Interrupt
                                 
                                 .org    $0056                   ; End of Interrupt Vectors
                                 
                                 ;***********************************************************
                                 ;*  Program Initialization
                                 ;***********************************************************
                                 INIT:
                                 	;Stack Pointer (VERY IMPORTANT!!!!)
000056 e00a                      ldi mpr, high(RAMEND)
000057 bf0e                      out SPH, mpr
000058 ef0f                      ldi mpr, low(RAMEND)
000059 bf0d                      out SPL, mpr
                                 
                                 	;I/O Ports
00005a e000                      ldi		mpr, $00		; Set Port D Data Direction Register
00005b b90a                      out		DDRD, mpr		; for input
00005c ef0f                      ldi		mpr, $FF		; Initialize Port D Data Register
00005d b90b                      out		PORTD, mpr		; so all Port D inputs are Tri-State
                                 
00005e ef0f                      ldi		mpr, $FF		; Set Port B Data Direction Register
00005f b904                      out		DDRB, mpr		; for output
000060 e000                      ldi		mpr, $00		; Initialize Port B Data Register
000061 b905                      out		PORTB, mpr		; so all Port B outputs are low
                                 
                                 	;USART1
000062 e202                      ldi		mpr, 0b00100010	; Set double data rate
000063 9300 00c8                 sts		UCSR1A, mpr		; 
                                 
                                 		;Set baudrate at 2400bps
000065 e001                      ldi		mpr, high(416)	; Load high byte of 416
000066 9300 00cd                 sts		UBRR1H, mpr		; UBRR0H extended I/O
000068 ea00                      ldi		mpr, low(416)	; Load low byte of 416
000069 9300 00cc                 sts		UBRR1L, mpr	; 
                                 
                                 		;Enable receiver and transmitter
00006b e908                      ldi		mpr, 0b10011000	;
00006c 9300 00c9                 sts		UCSR1B, mpr		;
                                 
                                 		;Set frame format: 8 data bits, 2 stop bits
00006e e00e                      ldi		mpr, 0b00001110	;
00006f 9300 00ca                 sts		UCSR1C, mpr		; UCSR0C extended I/O
                                 
                                 	;TIMER/COUNTER1 Set Normal mode
000071 e000                      ldi		mpr, 0b00000000	; Normal mode
000072 9300 0080                 sts		TCCR1A, mpr		;
000074 e001                      ldi		mpr, 0b00000001	; Prescalar 1
000075 9300 0081                 sts		TCCR1B, mpr		;
                                 
                                 	;Other
000077 d14f                      rcall	LCDInit			; Initialize LCD
000078 d094                      rcall	ClearLCD		; Clear LCD screen
                                 
000079 9478                      sei						; Turn on Interrupts
                                 
                                 ;***********************************************************
                                 ;*  Main Program
                                 ;***********************************************************
                                 MAIN:
00007a d16e                      	rcall	LCDBacklightOn	; Backlight for visibility
                                 	
00007b b109                      	in		mpr, PIND				; Input from PIND
00007c 780c                      	andi	mpr, (1<<Start)|(1<<Tx)|(1<<Rx)	; Decode Input
00007d 300c                      	cpi		mpr, (1<<Tx)|(1<<Rx)	; Check for PD7 Input
00007e f7d9                      	brne	MAIN					; If no input, continue
                                 
00007f d09f                      	rcall	Transmit				; Call Transmit Subroutine
                                 
                                 WaitForComm:
000080 ef0f                      	ldi		mpr, 0b11111111			; Checks for both boards ready
000081 2100                      	and		mpr, Ready1				;
000082 2101                      	and		mpr, Ready2				;
000083 3f0f                      	cpi		mpr, 0b11111111			;
000084 f7d9                      	brne	WaitForComm				;
                                 
000085 d180                      	rcall	LCDclr
                                 	; "Game Start"
000086 e9a9                      	ldi     XL, low(CounterRPS)
000087 e0b9                          ldi     XH, high(CounterRPS)
000088 e001                          ldi     mpr, 1
000089 930c                      	st      X, mpr
00008a e5ee                      	ldi		ZL, low(STRING5<<1)		; 
00008b e0f3                      	ldi		ZH, high(STRING5<<1)	; 
00008c e03a                      	ldi		olcnt, 10				; 
00008d d04d                      	rcall	WL1						; Write line 1
                                 
                                 	; LED Counter
00008e d001                      	rcall GameStart					; Start Game Loops
                                 
00008f cfea                      rjmp	MAIN
                                 
                                 ;***********************************************************
                                 ;*	Functions and Subroutines
                                 ;***********************************************************
                                 
                                 ;-----------------------------------------------------------
                                 ; Func:	GameStart
                                 ; Desc:	Starts the game loop
                                 ;-----------------------------------------------------------
                                 
                                 GameStart:
                                 	; Save variables by pushing them to the stack
000090 930f                      	push mpr
000091 93bf                      	push XH
000092 93af                      	push XL
                                 
000093 e9aa                      	ldi		XL, low(LEDCounter)
000094 e0b9                      	ldi		XH, high(LEDCounter)
000095 e004                      	ldi		mpr, 4
000096 930c                      	st		X, mpr
                                 TimerLoop:
000097 d007                      	rcall 	LEDChange		; Call LEDChange subroutine
000098 d02c                      	rcall 	WAIT_1_5msec		; Call WAIT_05msec subroutine
000099 950a                      	dec		mpr
00009a cffc                      	rjmp 	TimerLoop		; Loop 4 times
                                 END:
                                 	
                                 	; Restore variables by popping from stack in reverse order
00009b 91af                      	pop XL
00009c 91bf                      	pop XH
00009d 910f                      	pop mpr
                                 
00009e 9508                      	ret						; End Function
                                 
                                 ;-----------------------------------------------------------
                                 ; Func:	LEDChange
                                 ; Desc:	Changes LEDs corresponding to time left to choose
                                 ;-----------------------------------------------------------
                                 
                                 LEDChange:
                                 	; Save variables by pushing them to the stack
00009f 930f                      	push mpr
0000a0 933f                      	push olcnt
0000a1 93bf                      	push XH
0000a2 93af                      	push XL
                                 
0000a3 e9aa                          ldi		XL, low(LEDCounter)
0000a4 e0b9                          ldi     XH, high(LEDCounter)
0000a5 910c                          ld      mpr, X
0000a6 3004                          cpi     mpr, 4
0000a7 f419                          brne    OP2
0000a8 ef20                          ldi     ilcnt, 0b11110000
0000a9 b925                          out     PORTB, ilcnt
0000aa c013                          rjmp    LAST
                                     OP2:
0000ab 3003                              cpi		mpr, 3
0000ac f419                              brne    OP3
0000ad ee20                              ldi     ilcnt, 0b11100000
0000ae b925                              out     PORTB, ilcnt
0000af c00e                              rjmp    LAST
                                     OP3:
0000b0 3002                              cpi     mpr, 2
0000b1 f419                              brne    OP4
0000b2 ec20                              ldi     ilcnt, 0b11000000
0000b3 b925                              out     PORTB, ilcnt
0000b4 c009                              rjmp    LAST
                                     OP4:
0000b5 3001                              cpi     mpr, 1
0000b6 f419                              brne    OP5
0000b7 e820                              ldi     ilcnt, 0b10000000
0000b8 b925                              out     PORTB, ilcnt
0000b9 c004                              rjmp    LAST
                                     OP5:
0000ba 3000                              cpi     mpr, 0
0000bb f411                              brne    LAST
0000bc e020                              ldi     ilcnt, 0
0000bd b925                              out     PORTB, ilcnt
                                     LAST:
0000be 950a                              dec     mpr
0000bf 930c                              st      X, mpr
                                 	
                                 	; Restore variables by popping from stack in reverse order
0000c0 91af                      	pop XL
0000c1 91bf                      	pop XH
0000c2 913f                      	pop olcnt
0000c3 910f                      	pop mpr
                                 
0000c4 9508                      	ret										; End Function
                                 
                                 ;-----------------------------------------------------------
                                 ; Func:	WAIT_05msec
                                 ; Desc:	Wait function for LEDs
                                 ;-----------------------------------------------------------
                                 
                                 WAIT_1_5msec:
                                 	; Save variables by pushing them to the stack
0000c5 930f                      	push mpr
0000c6 933f                      	push olcnt
0000c7 932f                      	push ilcnt
                                 
0000c8 e936                      	ldi		olcnt, 150			; Load loop count = 150
                                 WAIT_10msec:
0000c9 b109                      	in		mpr, PIND			; Input from PIND
0000ca 7100                      	andi	mpr, (1<<4)			; Decode Input
0000cb 3000                      	cpi		mpr, 0				; Check for PD7 Input
0000cc f409                      	brne	Cont					; If no input, continue
0000cd d07b                      	rcall	RPSChoice
                                 Cont:
0000ce eb22                      	ldi		ilcnt, 178			; (Re)load value for delay
0000cf 9320 0084                 	sts		TCNT1L, ilcnt
                                 	; Wait for TCNT1 to roll over
                                 CHECK1:
0000d1 9bb0                      	sbis	TIFR1, TOV1
0000d2 cffe                      	rjmp	CHECK1
0000d3 e021                      	ldi		ilcnt, 0b00000001	; Otherwise, Reset TOV1
0000d4 bb26                      	out		TIFR1, ilcnt		; Note - write 1 to reset
0000d5 953a                      	dec		olcnt				; Decrement count
0000d6 f791                      	brne	WAIT_10msec
                                 
                                 	; Restore variables by popping from stack in reverse order
0000d7 912f                      	pop ilcnt
0000d8 913f                      	pop olcnt
0000d9 910f                      	pop mpr
                                 
0000da 9508                      	ret							; End Function
                                 
                                 ;-----------------------------------------------------------
                                 ; Func:	WL1
                                 ; Desc:	Writes STRING to LCD line 1
                                 ;-----------------------------------------------------------
                                 WL1:
                                 
                                 	; Save variables by pushing them to the stack
0000db 930f                      	push mpr
0000dc 933f                      	push olcnt
0000dd 93bf                      	push XH
0000de 93af                      	push XL
0000df 93df                      	push YH
0000e0 93cf                      	push YL
0000e1 93ff                      	push ZH
0000e2 93ef                      	push ZL
                                 
0000e3 d145                      	rcall	LCDClrLn1		; Clear first line of LCD
                                 
0000e4 e0a0                      	ldi		XL, $00			; Load low memory loaction of Line 1
0000e5 e0b1                      	ldi		XH, $01			; Load high memory loaction of Line 1
                                 
                                 WRLOOP1:
0000e6 9105                      	lpm		mpr, Z+			; Read byte from address Z into mpr post increment
0000e7 930d                      	st		X+, mpr			; Store byte from memory into LCD, increment to next
0000e8 953a                      	dec		olcnt			; Decrement counter
0000e9 f7e1                      	brne	WRLOOP1			; 
                                 
0000ea d105                      	rcall	LCDWrLn1		; Write to first line of LCD
                                 
                                 	; Restore variables by popping from stack in reverse order
0000eb 91ef                      	pop ZL
0000ec 91ff                      	pop ZH
0000ed 91cf                      	pop YL
0000ee 91df                      	pop YH
0000ef 91af                      	pop XL
0000f0 91bf                      	pop XH
0000f1 913f                      	pop olcnt
0000f2 910f                      	pop mpr
                                 
0000f3 9508                      	ret						; End function
                                 
                                 ;-----------------------------------------------------------
                                 ; Func:	WL2
                                 ; Desc:	Writes STRING to LCD line 2
                                 ;-----------------------------------------------------------
                                 WL2:
                                 
                                 	; Save variables by pushing them to the stack
0000f4 930f                      	push mpr
0000f5 933f                      	push olcnt
0000f6 93bf                      	push XH
0000f7 93af                      	push XL
0000f8 93df                      	push YH
0000f9 93cf                      	push YL
0000fa 93ff                      	push ZH
0000fb 93ef                      	push ZL
                                 
0000fc d132                      	rcall	LCDClrLn2		; Clear second line of LCD
                                 
0000fd e1c0                      	ldi		YL, $10			; Load low memory loaction of Line 2
0000fe e0d1                      	ldi		YH, $01			; Load high memory loaction of Line 2
                                 
                                 WRLOOP2:
0000ff 9105                      	lpm		mpr, Z+			; Read byte from address Z into mpr post increment
000100 9309                      	st		Y+, mpr			; Store byte from memory into LCD, increment to next
000101 953a                      	dec		olcnt			; Decrement counter
000102 f7e1                      	brne	WRLOOP2			; 
                                 
000103 d0f7                      	rcall	LCDWrLn2		; Write to second line of LCD
                                 
                                 	; Restore variables by popping from stack in reverse order
000104 91ef                      	pop ZL
000105 91ff                      	pop ZH
000106 91cf                      	pop YL
000107 91df                      	pop YH
000108 91af                      	pop XL
000109 91bf                      	pop XH
00010a 913f                      	pop olcnt
00010b 910f                      	pop mpr
                                 
00010c 9508                      	ret						; End function
                                 
                                 ;-----------------------------------------------------------
                                 ; Func:	ClearLCD
                                 ; Desc:	Clears LCD, beginning program
                                 ;-----------------------------------------------------------
                                 ClearLCD: 
                                 	; Save variables by pushing them to the stack
00010d 930f                      	push mpr
00010e 933f                      	push olcnt
00010f 93ff                      	push ZH
000110 93ef                      	push ZL
                                 
000111 d0f4                      	rcall	LCDClr				; Clear LCD
                                 	
                                 	; "Welcome!"
000112 e2e8                      	ldi		ZL, low(STRING1<<1)	; 
000113 e0f3                      	ldi		ZH, high(STRING1<<1); 
000114 e038                      	ldi		olcnt, 8			; 
000115 dfc5                      	rcall	WL1					; Write line 1
                                 
                                 	; "Please Press PD7"
000116 e3e0                      	ldi		ZL, low(STRING2<<1)	; 
000117 e0f3                      	ldi		ZH, high(STRING2<<1);
000118 e130                      	ldi		olcnt, 16			;
000119 dfda                      	rcall	WL2					; Write line 2
                                 
                                 	; Restore variables by popping from stack in reverse order
00011a 91ef                      	pop ZL
00011b 91ff                      	pop ZH
00011c 913f                      	pop olcnt
00011d 910f                      	pop mpr
                                 
00011e 9508                      	ret							; End function
                                 
                                 ;-----------------------------------------------------------
                                 ; Func:	Transmit
                                 ; Desc:	Begins Transmission
                                 ;-----------------------------------------------------------
                                 Transmit:
                                 	; Save variables by pushing them to the stack
00011f 930f                      	push mpr
000120 933f                      	push olcnt
000121 93ff                      	push ZH
000122 93ef                      	push ZL
                                 
                                 USART_T:
000123 9100 00c8                 	lds		mpr, UCSR1A			; Load UCSR1A into mpr
000125 ff05                      	sbrs	mpr, 5				; Stop loop when UCSR1A bit 5 is set
000126 cffc                      	rjmp	USART_T				;
                                 	
                                 	; Confirmation
000127 ef0f                      	ldi		mpr, SendReady		; Load SendReady (0b11111111) into mpr
000128 9300 00ce                 	sts		UDR1, mpr			; Store SendReady in UDR1
00012a 2e00                      	mov		Ready1, mpr			; Copy to Ready1 state as SendReady
                                 
00012b d0da                      	rcall LCDClr				; Clear LCD
                                 
                                 	; "Ready. Waiting"
00012c e4e0                      	ldi		ZL, low(STRING3<<1)	;
00012d e0f3                      	ldi		ZH, high(STRING3<<1);
00012e e03e                      	ldi		olcnt, 14			;
00012f dfab                      	rcall	WL1					; Write line 1
                                 
                                 	; "For The Opponent"
000130 e4ee                      	ldi		ZL, low(STRING4<<1)	;
000131 e0f3                      	ldi		ZH, high(STRING4<<1);
000132 e130                      	ldi		olcnt, 16			;
000133 dfc0                      	rcall	WL2					; Write line 2
                                 
                                 	; Restore variables by popping from stack in reverse order
000134 91ef                      	pop ZL
000135 91ff                      	pop ZH
000136 913f                      	pop olcnt
000137 910f                      	pop mpr
                                 
000138 9508                      	ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func:	Receive
                                 ; Desc:	Begins Receiving
                                 ;-----------------------------------------------------------
                                 Receive:
                                 	; Save variables by pushing them to the stack
000139 930f                      	push mpr
00013a 933f                      	push olcnt
00013b 93bf                      	push XH
00013c 93af                      	push XL
00013d 93ff                      	push ZH
00013e 93ef                      	push ZL
                                 
                                 USART_R:
                                 	; Confirmation
00013f 9100 00ce                 	lds		mpr, UDR1			; Load SendReady confirmation from UDR1 into mpr
000141 2e10                      	mov		Ready2, mpr			; Copy to Ready2 state as SendReady
                                 
                                 	; Restore variables by popping from stack in reverse order
000142 91ef                      	pop ZL
000143 91ff                      	pop ZH
000144 91af                      	pop XL
000145 91bf                      	pop XH
000146 913f                      	pop olcnt
000147 910f                      	pop mpr
                                 
000148 9508                      	ret							; End function
                                 
                                 ;-----------------------------------------------------------
                                 ; Func:	RPSChoice
                                 ; Desc:	Allows PD4 input for cycling RPS choices
                                 ;-----------------------------------------------------------
                                 RPSChoice:
                                 	; Save variables by pushing them to the stack
000149 930f                      	push mpr
00014a 93bf                      	push XH
00014b 93af                      	push XL
00014c 932f                      	push ilcnt
00014d 933f                      	push olcnt
                                 
                                 CHOOSELOOP:
                                 ;	in		mpr, PIND				; Input from PIND
                                 ;	andi	mpr, (1<<4)	; Decode Input
                                 ;	cpi		mpr, 0		; Check for PD4 Input
                                 ;	breq	CHOOSELOOP
                                 
00014e e9a9                      	ldi     XL, low(CounterRPS)
00014f e0b9                          ldi     XH, high(CounterRPS)
000150 910c                          ld      mpr, X
000151 9503                      	inc		mpr
000152 3004                          cpi     mpr, 4
000153 f409                          brne    SKIP
000154 e001                          ldi     mpr, 1
                                 SKIP:    
000155 930c                      	st		X, mpr
000156 d010                      	rcall   WriteRPS
000157 e13e                      	ldi		olcnt, 30			; Load loop count = 150
                                 WAIT_10msec1:
000158 eb22                      	ldi		ilcnt, 178			; (Re)load value for delay
000159 9320 0084                 	sts		TCNT1L, ilcnt
                                 	; Wait for TCNT1 to roll over
                                 CHECK:
00015b 9bb0                      	sbis	TIFR1, TOV1
00015c cffe                      	rjmp	CHECK
00015d e021                      	ldi		ilcnt, 0b00000001	; Otherwise, Reset TOV1
00015e bb26                      	out		TIFR1, ilcnt		; Note - write 1 to reset
00015f 953a                      	dec		olcnt				; Decrement count
000160 f7b9                      	brne	WAIT_10msec1
                                 
                                 	; Restore variables by popping from stack in reverse order
000161 913f                      	pop olcnt
000162 912f                      	pop ilcnt
000163 91af                      	pop XL
000164 91bf                      	pop XH
000165 910f                      	pop mpr
                                 
000166 9508                      	ret							; End Function
                                 
                                 ;-----------------------------------------------------------
                                 ; Func:	WriteRPS
                                 ; Desc:	Writes current RPS choice to LCD 2nd row
                                 ;-----------------------------------------------------------
                                 WriteRPS:
                                 		; Save variables by pushing them to the stack
000167 930f                      	push mpr
000168 933f                      	push olcnt
000169 93bf                      	push XH
00016a 93af                      	push XL
00016b 93df                      	push YH
00016c 93cf                      	push YL
00016d 93ff                      	push ZH
00016e 93ef                      	push ZL
                                 
00016f e9a9                      	ldi     XL, low(CounterRPS)
000170 e0b9                          ldi     XH, high(CounterRPS)
000171 910c                      	ld      mpr, X
                                 	
                                 	; is Scissors?
000172 3003                          cpi     mpr, 3
000173 f421                      	brne	NEXTCHOICE1
                                 
                                 	; "Scissors"
000174 e7e2                      	ldi		ZL, low(STRING8<<1)		; 
000175 e0f3                      	ldi		ZH, high(STRING8<<1)	; 
000176 e038                      	ldi		olcnt, 8				; 
000177 c00b                      	rjmp	RPSWRITEOUT				;
                                 
                                 NEXTCHOICE1:
                                 	; is Paper?
000178 3002                          cpi     mpr, 2
000179 f421                      	brne	NEXTCHOICE2
                                 
                                 	; "Paper "
00017a e6ec                      	ldi		ZL, low(STRING7<<1)		; 
00017b e0f3                      	ldi		ZH, high(STRING7<<1)	; 
00017c e036                      	ldi		olcnt, 6				;
00017d c005                      	rjmp	RPSWRITEOUT 
                                 
                                 NEXTCHOICE2:
                                 	; is Rock?
00017e 3001                          cpi     mpr, 1
00017f f419                      	brne	RPSWRITEOUT
                                 
                                 	; "Rock"
000180 e6e8                      	ldi		ZL, low(STRING6<<1)		; 
000181 e0f3                      	ldi		ZH, high(STRING6<<1)	; 
000182 e034                      	ldi		olcnt, 4				; 
                                 
                                 RPSWRITEOUT:
000183 d0ab                      	rcall	LCDClrLn2		; Clear second line of LCD
                                 
000184 e1c0                      	ldi		YL, $10			; Load low memory loaction of Line 2
000185 e0d1                      	ldi		YH, $01			; Load high memory loaction of Line 2
                                 
                                 RPSLOOP1:
000186 9105                      	lpm		mpr, Z+			; Read byte from address Z into mpr post increment
000187 9309                      	st		Y+, mpr			; Store byte from memory into LCD, increment to next
000188 953a                      	dec		olcnt			; Decrement counter
000189 f7e1                      	brne	RPSLOOP1		; 
                                 
00018a d070                      	rcall	LCDWrLn2		; Write to second line of LCD
                                 
                                 	; Restore variables by popping from stack in reverse order
00018b 91ef                      	pop ZL
00018c 91ff                      	pop ZH
00018d 91cf                      	pop YL
00018e 91df                      	pop YH
00018f 91af                      	pop XL
000190 91bf                      	pop XH
000191 913f                      	pop olcnt
000192 910f                      	pop mpr
                                 
000193 9508                      	ret						; End Function
                                 
                                 ;***********************************************************
                                 ;*	Stored Program Data
                                 ;***********************************************************
                                 
                                 ;-----------------------------------------------------------
                                 ; Strings
                                 ;-----------------------------------------------------------
                                 STRING1:
000194 6557
000195 636c
000196 6d6f
000197 2165                          .DB		"Welcome!"			; Declaring String 1 data in ProgMem
                                 STRING2:
000198 6c50
000199 6165
00019a 6573
00019b 7020
00019c 6572
00019d 7373
00019e 5020
00019f 3744                      	.DB		"Please press PD7"	; Declaring String 2 data in ProgMem
                                 STRING3:
0001a0 6552
0001a1 6461
0001a2 2e79
0001a3 5720
0001a4 6961
0001a5 6974
0001a6 676e                      	.DB		"Ready. Waiting"	; Declaring String 3 data in ProgMem
                                 STRING4:
0001a7 6f46
0001a8 2072
0001a9 6854
0001aa 2065
0001ab 704f
0001ac 6f70
0001ad 656e
0001ae 746e                      	.DB		"For The Opponent"	; Declaring String 4 data in ProgMem
                                 STRING5:
0001af 6147
0001b0 656d
0001b1 5320
0001b2 6174
0001b3 7472                      	.DB		"Game Start"		; Declaring String 5 data in ProgMem
                                 STRING6:
0001b4 6f52
0001b5 6b63                      	.DB		"Rock"				; Declaring String 6 data in ProgMem
                                 STRING7:
0001b6 6150
0001b7 6570
0001b8 2072                      	.DB		"Paper "			; Declaring String 7 data in ProgMem
                                 STRING8:
0001b9 6353
0001ba 7369
0001bb 6f73
0001bc 7372                      	.DB		"Scissors"			; Declaring String 8 data in ProgMem
                                 STRING9:
0001bd 6f59
0001be 2075
0001bf 6f57
0001c0 216e                      	.DB		"You Won!"			; Declaring String 9 data in ProgMem
                                 STRING10:
0001c1 6f59
0001c2 2075
0001c3 6f4c
0001c4 7473                      	.DB		"You Lost"			; Declaring String 10 data in ProgMem
                                 STRING11:
0001c5 7244
0001c6 7761                      	.DB		"Draw"				; Declaring String 11 data in ProgMem
                                 
                                 ;------------------------------------------------------------
                                 ;    Data Memory Allocation
                                 ;------------------------------------------------------------
                                 .dseg
                                 .org	$0999				; data memory allocation
                                 CounterRPS:
000999                               .byte 1					; allocate 1 byte for CounterRPS
                                 LEDCounter:
00099a                           	.byte 1					; allocate 1 byte of LEDCounter
                                 
                                 ;***********************************************************
                                 ;*	Additional Program Includes
                                 ;***********************************************************
                                 .include "LCDDriver.asm"		; Include the LCD Driver
                                 
                                 ;*	Oregon State University
                                 ;*	ST7565R LCD Driver
                                 ;*	This code configures the graphical LCD and emulates
                                 ;*	the behavior of a 2x16 character display.
                                 ;*
                                 ;*	The LCD has room for 32 characters in total
                                 ;*	(16 on the top and 16 on the bottom).
                                 ;*	The upper 16 characters should be located in SRAM starting at 0x0100.
                                 ;*	The lower 16 characters should be located in SRAM starting at 0x0110.
                                 ;*
                                 ;*	NOTE: Register r16 MUST be named 'mpr' in the Main Code
                                 ;*	Something like this:
                                 ;*	.def	mpr = r16
                                 ;*
                                 ;*	WARNING: Register r20-r22 are reserved and cannot be
                                 ;*		renamed outside of the LCD Driver functions. Doing
                                 ;*		so will damage the functionality of the LCD Driver
                                 ;*
                                 ;*	Acknowledgements: the Bin2ASCII and div10 procedures were written by
                                 ;*	David Zier for a previous board. The code has been retained intact.
                                 ;*
                                 ;*********************************************************************
                                 ;*	Rev	Date		Name			Description
                                 ;*--------------------------------------------------------------------
                                 ;*	-	8/18/22	Justin Goins	Version 1.0
                                 ;*
                                 ;*
                                 ;*********************************************************************
                                 
                                 .include "m32U4def.inc"				; Include definition file
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32U4.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32U4def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32U4
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32U4
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32U4DEF_INC_
                                 #endif  /* _M32U4DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Register definitions
                                 .def	count = r20			; Character Counter
                                 .def	q = r21			; Quotient for div10
                                 .def	r = r22			; Remander for div10
                                 
                                 ; The following constants are not intended to be modified.
                                 .equ	lcd_buffer_addr = 0x0100 ; define the SRAM base address of the LCD buffer
                                 
                                 ; This information is gathered from the ST7565R datasheet.
                                 ; define some command patterns
                                 .equ	lcd_c_disp_en = 0b10101110 ; lsb indicates whether the LCD is on (1) or off (0)
                                 .equ	lcd_c_disp_set_start_ln = 0b01000000 ; lower 6 bits indicate the line index (0 - 63)
                                 .equ	lcd_c_disp_set_page_addr = 0b10110000 ; lower 4 bits indicate the page address (page 3 is at top and page 0 is at bottom)
                                 ; together, these commands allow you to specify a column index from (0 - 131):
                                 .equ	lcd_c_disp_set_col_addr_h = 0b00010000 ; lower 4 bits indicate the 4 high bits of the column address
                                 .equ	lcd_c_disp_set_col_addr_l = 0b00000000 ; lower 4 bits indicate the 4 low bits of the column address
                                 .equ	lcd_c_disp_set_invert = 0b10100110 ; lsb indicates whether the LCD is normal (0) or inverted (1)
                                 .equ	lcd_c_disp_fill = 0b10100100 ; lsb indicates whether the LCD is normal (0) or filled with dots (1)
                                 .equ	lcd_c_disp_reset = 0b11100010 ; resets the line/page addresses and other stuff, does not affect data RAM
                                 .equ	lcd_c_disp_set_bias = 0xA2 ; 1/6 bias (in 1/33 duty mode)
                                 .equ	lcd_c_disp_set_scandir = 0b11000000 ; select normal scan direction (most significant bit is placed at top of LCD)
                                 .equ	lcd_c_disp_set_contrast_1 = 0b10000001 ; first we send this command then we pass the value
                                 .equ	lcd_c_disp_set_contrast_2 = 15 ; can select a contrast value between 1 and 63
                                 .equ	lcd_c_disp_set_res_ratio = 0x22 ; see the datasheet
                                 .equ	lcd_c_disp_vreg_on = 0x2F ; enable voltage booster, voltage regulator, and voltage follower
                                 
                                 ; use this command to write into the LCD RAM:
                                 .equ	lcd_c_disp_write = 0b00000000 ; these 8 bits are the data to be placed in the target. 
                                 ; note that the column address is automatically incremented by 1 after each write to the LCD data
                                 
                                 ; everything in this driver file needs to go into the code segment
                                 .cseg
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDInit
                                 ;* Desc:	This function initializes the LCD control pins and
                                 ;*		sets reasonable values for the configuration registers.
                                 ;*****************************************************************
                                 LCDInit:
0001c7 930f                      	push	mpr
                                 
                                 	; set MOSI, SCL, and SS as outputs
0001c8 9a22                      	sbi	DDRB, DDB2	; Port B 2
0001c9 9a21                      	sbi	DDRB, DDB1	; Port B 1
0001ca 9a20                      	sbi	DDRB, DDB0	; Port B 0
                                 	; ensure that SS is deactivated (active low)
0001cb 9a28                      	sbi	PORTB, 0
                                 	; set lcd_A0 as output
0001cc 9a81                      	sbi	DDRF, DDF1	; Port F 1
                                 	; enable LCD backlight control
0001cd 9a3f                      	sbi	DDRC, DDC7	; Port C 7
                                 	; set lcd_RST_N as output
0001ce 9a80                      	sbi	DDRF, DDF0	; Port F 0
                                 	; we pull lcd_RST_N low for 1 millisecond
0001cf 9888                      	cbi	PORTF, 0
0001d0 940e 02b2                 	call	LCDDelay
0001d2 9a88                      	sbi	PORTF, 0
                                 	; Enable SPI mode 3, master configuration, set clock rate fck/2 using SPI2X
0001d3 e50c                      	ldi	mpr, (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA)
0001d4 bd0c                      	out	SPCR, mpr
0001d5 e001                      	ldi	mpr, (1<<SPI2X)
0001d6 bd0d                      	out	SPSR, mpr
                                 	; Note: after transmitting a byte, the SPI interrupt flag will
                                 	; be automatically cleared next time we: 1) read SPSR and ALSO 2) access SPDR
                                 
0001d7 9828                      	cbi	PORTB, 0	; activate slave select
                                 	; send a string of initialization commands
0001d8 ea02                      	ldi	mpr, lcd_c_disp_set_bias
0001d9 d0d2                      	rcall	LCD_Internal_WriteCMD
0001da ec00                      	ldi	mpr, lcd_c_disp_set_scandir
0001db d0d0                      	rcall	LCD_Internal_WriteCMD
0001dc e801                      	ldi	mpr, lcd_c_disp_set_contrast_1
0001dd d0ce                      	rcall	LCD_Internal_WriteCMD
0001de e00f                      	ldi	mpr, lcd_c_disp_set_contrast_2
0001df d0cc                      	rcall	LCD_Internal_WriteCMD
0001e0 e202                      	ldi	mpr, lcd_c_disp_set_res_ratio
0001e1 d0ca                      	rcall	LCD_Internal_WriteCMD
0001e2 e20f                      	ldi	mpr, lcd_c_disp_vreg_on
0001e3 d0c8                      	rcall	LCD_Internal_WriteCMD
0001e4 ea0f                      	ldi	mpr, (lcd_c_disp_en | 1 << 0)
0001e5 d0c6                      	rcall	LCD_Internal_WriteCMD
0001e6 9a28                      	sbi	PORTB, 0	; deactivate slave select
                                 
0001e7 910f                      	pop	mpr
0001e8 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDBacklightOn
                                 ;* Desc:	Enables the backlight
                                 ;*****************************************************************
                                 LCDBacklightOn:
0001e9 9a47                      	sbi	PORTC, 7
0001ea 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDBacklightOff
                                 ;* Desc:	Disables the backlight
                                 ;*****************************************************************
                                 LCDBacklightOff:
0001eb 9847                      	cbi	PORTC, 7
0001ec 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDWrite
                                 ;* Desc:	This function writes 32 characters to the LCD screen...
                                 ;*		16 chars on the top line and 16 chars on the bottom line.
                                 ;*****************************************************************
                                 LCDWrite:
0001ed d002                      	rcall	LCDWrLn1
0001ee d00c                      	rcall	LCDWrLn2
0001ef 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDWrLn1
                                 ;* Desc:	This function writes 16 characters to the top line.
                                 ;*****************************************************************
                                 LCDWrLn1:
0001f0 93bf                      	push	XH
0001f1 93af                      	push	XL
0001f2 931f                      	push	r17
                                 	; r17 specifies the destination bank in LCD RAM
0001f3 e013                      	ldi	r17, 3
                                 	; point X at the ASCII data
0001f4 e0b1                      	ldi	XH, HIGH(lcd_buffer_addr)
0001f5 e0a0                      	ldi	XL, LOW(lcd_buffer_addr)
0001f6 d05c                      	rcall	LCD_Internal_WriteLn
0001f7 911f                      	pop	r17
0001f8 91af                      	pop	XL
0001f9 91bf                      	pop	XH
0001fa 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDWrLn2
                                 ;* Desc:	This function writes 16 characters to the bottom line.
                                 ;*****************************************************************
                                 LCDWrLn2:
0001fb 93bf                      	push	XH
0001fc 93af                      	push	XL
0001fd 931f                      	push	r17
                                 	; r17 specifies the destination bank in LCD RAM
0001fe e011                      	ldi	r17, 1
                                 	; point X at the ASCII data
0001ff e0b1                      	ldi	XH, HIGH(lcd_buffer_addr+16)
000200 e1a0                      	ldi	XL, LOW(lcd_buffer_addr+16)
000201 d051                      	rcall	LCD_Internal_WriteLn
000202 911f                      	pop	r17
000203 91af                      	pop	XL
000204 91bf                      	pop	XH
000205 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDClr
                                 ;* Desc:	This function clears the entire LCD screen.
                                 ;*****************************************************************
                                 LCDClr:
000206 d022                      	rcall	LCDClrLn1
000207 d027                      	rcall	LCDClrLn2
                                 
000208 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	CLRDM1
                                 ;* Desc:	This function clears Data Memory by writing 16 
                                 ;*		consecutive ASCII spaces $20 to the memory at $0100.
                                 ;*****************************************************************
                                 CLRDM1:
                                     ; Set X register points to $0100
000209 93bf                      	   push	   XH
00020a 93af                      	   PUSH	   XL
00020b 930f                                 push    r16
00020c 931f                                 push    r17
                                 
00020d e0b1                                 ldi     XH, HIGH(lcd_buffer_addr)
00020e e0a0                                 ldi     XL, LOW(lcd_buffer_addr)
00020f e110                                 ldi     r17, 16
000210 e200                                 ldi     r16, ' '
                                    CLRloop1:
000211 930d                                 st      X+, r16         ; load data to DM
000212 951a                                 dec     r17
000213 f7e9                                 brne    CLRloop1
                                 
000214 911f                      	   pop	   r17
000215 910f                      	   pop	   r16
000216 91af                      	   pop	   XL
000217 91bf                      	   pop	   XH
                                 
000218 9508                                 ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	CLRDM2
                                 ;* Desc:	This function clears Data Memory by writing 16 
                                 ;*		consecutive ASCII spaces $20 to the memory at $0110.
                                 ;*****************************************************************
                                 CLRDM2:
                                     ; Set X register points to $0110
000219 93bf                      	   push	   XH
00021a 93af                      	   PUSH	   XL
00021b 930f                                 push    r16
00021c 931f                                 push    r17
                                 
00021d e0b1                                 ldi     XH, HIGH(lcd_buffer_addr+16)
00021e e1a0                                 ldi     XL, LOW(lcd_buffer_addr+16)
00021f e110                                 ldi     r17, 16
000220 e200                                 ldi     r16, ' '
                                    CLRloop2:
000221 930d                                 st      X+, r16         ; load data to DM
000222 951a                                 dec     r17
000223 f7e9                                 brne    CLRloop2
                                 
000224 911f                      	   pop	   r17
000225 910f                      	   pop	   r16
000226 91af                      	   pop	   XL
000227 91bf                      	   pop	   XH
                                 
000228 9508                                 ret
                                 ;*****************************************************************
                                 ;* Func:	LCDClrLn1
                                 ;* Desc:	This function clears the top line of the LCD screen.
                                 ;*****************************************************************
                                 LCDClrLn1:
000229 931f                      	push	r17
                                 	; r17 specifies the target bank in LCD RAM
00022a e013                      	ldi	r17, 3
00022b d060                      	rcall	LCD_Internal_ClearLn
00022c dfdc                      	rcall	CLRDM1
00022d 911f                      	pop	r17
00022e 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDClrLn2
                                 ;* Desc:	This function clears the bottom line of the LCD screen.
                                 ;*****************************************************************
                                 LCDClrLn2:
00022f 931f                      	push	r17
                                 	; r17 specifies the target bank in LCD RAM
000230 e011                      	ldi	r17, 1
000231 d05a                      	rcall	LCD_Internal_ClearLn
000232 dfe6                      	rcall	CLRDM2
000233 911f                      	pop	r17
000234 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	Bin2ASCII
                                 ;* Desc:	Converts a binary number into an ASCII 
                                 ;*			text string equivalent. 
                                 ;*			- The binary number needs to be in the mpr
                                 ;*			- The Start Address of where the text will
                                 ;*			 	be placed needs to be in the X Register
                                 ;*			- The count of the characters created are 
                                 ;*				added to the count register
                                 ;*****************************************************************
                                 Bin2ASCII:
000235 930f                      	push	mpr			; save mpr
000236 936f                      	push	r			; save r
000237 935f                      	push	q			; save q
000238 93bf                      	push	XH			; save X-pointer
000239 93af                      	push	XL			;
                                 
                                 	; Determine the range of mpr
00023a 3604                      	cpi	mpr, 100		; is mpr >= 100
00023b f018                      	brlo	B2A_1			; goto next check
00023c e043                      	ldi	count, 3		; Three chars are written
00023d 9613                      	adiw	XL, 3			; Increment X 3 address spaces
00023e c007                      	rjmp	B2A_3			; Continue with program
                                 B2A_1:
00023f 300a                      	cpi	mpr, 10		; is mpr >= 10
000240 f018                      	brlo	B2A_2			; Continue with program
000241 e042                      	ldi	count, 2		; Two chars are written
000242 9612                      	adiw	XL, 2			; Increment X 2 address spaces
000243 c002                      	rjmp	B2A_3			; Continue with program
                                 B2A_2:
000244 9611                      	adiw	XL, 1			; Increment X 1 address space
000245 e041                      	ldi	count, 1		; One char is written
                                 
                                 B2A_3:
                                 	; Do-While statement that converts Binary to ASCII
000246 d076                      	rcall	div10			; Call the div10 function
000247 e300                      	ldi	mpr, '0'		; Set the base ASCII integer value
000248 0f06                      	add	mpr, r		; Create the ASCII integer value
000249 930e                      	st	-X, mpr		; Load ASCII value to memory
00024a 2f05                      	mov	mpr, q		; Set mpr to quotient value
00024b 3000                      	cpi	mpr, 0		; does mpr == 0
00024c f7c9                      	brne	B2A_3			; do while (mpr != 0)
                                 
00024d 91af                      	pop	XL			; restore X-pointer
00024e 91bf                      	pop	XH			;
00024f 915f                      	pop	q			; restore q
000250 916f                      	pop	r			; restore r
000251 910f                      	pop	mpr			; restore mpr
000252 9508                      	ret				; return from function
                                 
                                 ;*****************************************************************
                                 ;*	The functions below here are intended for internal use only.
                                 ;*****************************************************************
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCD_Internal_WriteLn
                                 ;* Desc:	Sends 16 characters of information to the LCD panel
                                 ;*		This is slightly more complicated than it sounds because the
                                 ;*		characters straddle two banks of the LCD memory.
                                 ;*		X is pointing at the first ASCII character to be displayed.
                                 ;*		r17 holds the index of the destination bank in LCD RAM.
                                 ;*		
                                 ;*****************************************************************
                                 LCD_Internal_WriteLn:
000253 920f                      	push	r0
000254 921f                      	push	r1
000255 930f                      	push	mpr
000256 932f                      	push	r18
000257 933f                      	push	r19
000258 938f                      	push	r24
000259 939f                      	push	r25
00025a 93ef                      	push	ZL
00025b 93ff                      	push	ZH
                                 
                                 	; r25:24 holds a pointer to the base address of the bitmap array
00025c e095                      	ldi	r25, HIGH(FontBitmap << 1);
00025d ec86                      	ldi	r24, LOW(FontBitmap << 1);
                                 
00025e 9828                      	cbi	PORTB, 0	; activate slave select
                                 
                                 	; use a counter to track if we are on the top chunk or bottom chunk of each char
00025f e022                      	ldi	r18, 2
                                 
                                 LCD_WL_display_bank:
                                 	; set the column to 0
000260 e100                      	ldi	mpr, lcd_c_disp_set_col_addr_h
000261 d04a                      	rcall	LCD_Internal_WriteCMD
000262 e000                      	ldi	mpr, lcd_c_disp_set_col_addr_l
000263 d048                      	rcall	LCD_Internal_WriteCMD
                                 	; we need to select the appropriate page
000264 eb00                      	ldi	mpr, lcd_c_disp_set_page_addr
000265 2b01                      	or	mpr, r17	; set the lower 4 bits
000266 d045                      	rcall	LCD_Internal_WriteCMD
                                 
000267 e130                      	ldi	r19, 16	; there are 16 characters per line
                                 
                                 LCD_WL_next_char:
                                 	; get ascii code point & determine location of corresponding character bitmap
000268 900d                      	ld	r0, X+	; this should be a value from 0 to 255
000269 e100                      	ldi	mpr, 16	; there are 16 bytes per character
00026a 9e00                      	mul	r0, mpr	; determine the byte offset for the desired char
00026b 01fc                      	movw	ZH:ZL, r25:r24	; copy the base address to Z
00026c 0de0                      	add	ZL, r0	; finally, compute a pointer to the char bitmap
00026d 1df1                      	adc	ZH, r1
                                 
00026e e008                      	ldi	mpr, 8	; there are 8 columns for each character
                                 
                                 	; this is where we display the chunk of character (either a top chunk or bottom chunk)
00026f 9004                      	lpm	r0, Z
                                 LCD_WL_next_col:
000270 bc0e                      	out	SPDR, r0
000271 9a89                      	sbi	PORTF, 1	; set lcd_A0 to specify data mode
000272 9632                      	adiw	ZH:ZL, 2	; point Z at the next column for this bank
000273 9004                      	lpm	r0, Z		; this is a sneaky way to save a few clock cycles (since we are waiting for the SPI communication)
                                 LCD_WL_wait_spi:
000274 b41d                      	in	r1, SPSR
000275 fe17                      	sbrs	r1, SPIF	; wait for SPI to finish
000276 cffd                      	rjmp	LCD_WL_wait_spi
                                 
                                 	; keep going until we have displayed all the columns for this character
000277 950a                      	dec	mpr
000278 f7b9                      	brne	LCD_WL_next_col
                                 
                                 	; move to the next character
000279 953a                      	dec	r19
00027a f769                      	brne	LCD_WL_next_char
                                 
                                 	; if we are at the end of the line, configure the bank and starting array offset for the bottom half of each char
00027b 952a                      	dec	r18		; did we display both banks yet?
00027c f021                      	breq	LCD_WL_all_done
                                 	; if not, then prepare to display the bottom chunk of each character
00027d 951a                      	dec	r17		; decrement the bank number
00027e 9750                      	sbiw	XH:XL, 16	; X needs to point back at the beginning character of the line
00027f 9601                      	adiw	r25:r24, 1	; increment the base address pointer (now it will point to the second chunk of each char)
000280 cfdf                      	rjmp	LCD_WL_display_bank
                                 
                                 LCD_WL_all_done:
000281 9a28                      	sbi	PORTB, 0	; deactivate slave select
                                 
000282 91ff                      	pop	ZH
000283 91ef                      	pop	ZL
000284 919f                      	pop	r25
000285 918f                      	pop	r24
000286 913f                      	pop	r19
000287 912f                      	pop	r18
000288 910f                      	pop	mpr
000289 901f                      	pop	r1
00028a 900f                      	pop	r0
00028b 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCD_Internal_ClearLn
                                 ;* Desc:	This function clears two of the LCD memory banks.
                                 ;*		r17 specifies the starting bank to wipe.
                                 ;*****************************************************************
                                 LCD_Internal_ClearLn:
00028c 930f                      	push	mpr
00028d 921f                      	push	r1
00028e 932f                      	push	r18
00028f 933f                      	push	r19
                                 
000290 9828                      	cbi	PORTB, 0	; activate slave select
000291 e032                      	ldi	r19, 2	; we are going to clear two banks
                                 
                                 LCD_CLRLN_clear_bank:
                                 	; set the column to 0
000292 e100                      	ldi	mpr, lcd_c_disp_set_col_addr_h
000293 d018                      	rcall	LCD_Internal_WriteCMD
000294 e000                      	ldi	mpr, lcd_c_disp_set_col_addr_l
000295 d016                      	rcall	LCD_Internal_WriteCMD
                                 	; we need to select the appropriate page
000296 eb00                      	ldi	mpr, lcd_c_disp_set_page_addr
000297 2b01                      	or	mpr, r17	; configure the lower 4 bits
000298 d013                      	rcall	LCD_Internal_WriteCMD
                                 
000299 e820                      	ldi	r18, 128	; there are 128 columns on the LCD
00029a 2700                      	clr	mpr		; we will fill each column with empty dots (i.e. blank space)
00029b 9a89                      	sbi	PORTF, 1	; set lcd_A0 to specify data mode
                                 
                                 LCD_CLRLN_write_col:
00029c bd0e                      	out	SPDR, mpr	; send an empty column to the LCD via SPI
                                 LCD_CLRLN_wait_spi:
00029d b41d                      	in	r1, SPSR
00029e fe17                      	sbrs	r1, SPIF	; wait for SPI to finish
00029f cffd                      	rjmp	LCD_CLRLN_wait_spi
                                 
0002a0 952a                      	dec	r18
0002a1 f7d1                      	brne	LCD_CLRLN_write_col	; cycle through all 128 columns
                                 
                                 	; clear the remaining bank if we haven't done so already
0002a2 953a                      	dec	r19
0002a3 f011                      	breq	LCD_CLRLN_all_done
0002a4 951a                      	dec	r17		; decrement the bank index
0002a5 cfec                      	rjmp	LCD_CLRLN_clear_bank
                                 
                                 LCD_CLRLN_all_done:
0002a6 9a28                      	sbi	PORTB, 0	; deactivate slave select	
                                 	
                                 	; pop registers...
0002a7 913f                      	pop	r19
0002a8 912f                      	pop	r18
0002a9 901f                      	pop	r1
0002aa 910f                      	pop	mpr
0002ab 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCD_Internal_WriteCMD
                                 ;* Desc:	Sends the byte in mpr
                                 ;*		If you use this function directly,
                                 ;*		YOU ARE RESPONSIBLE for handling the slave select line!
                                 ;*****************************************************************
                                 LCD_Internal_WriteCMD:
0002ac bd0e                      	out	SPDR, mpr	; initiate transmission
0002ad 9889                      	cbi	PORTF, 1	; clear lcd_A0 to put the lcd into command mode
                                 				; (this just has to be done before the 8th bit
                                 				; is transmitted via SPI)
                                 LCD_IWC_L1:
0002ae b50d                      	in	mpr, SPSR
0002af ff07                      	sbrs	mpr, SPIF	; wait for SPI to finish
0002b0 cffd                      	rjmp LCD_IWC_L1
0002b1 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDDelay
                                 ;* Desc:	A wait loop that will consume roughly 1ms
                                 ;*		Note that a CALL takes 4 cycles on top of this delay.
                                 ;*****************************************************************
                                 LCDDelay:
0002b2 930f                      	push	mpr		; 2 cycles
0002b3 931f                      	push	r17		; 2 cycles
0002b4 e01b                      	ldi	r17, 11	; 1 cycle
                                 LCDDelay_L1:
0002b5 ef02                      	ldi	mpr, 242	; 1 cycle
                                 LCDDelay_L2:
0002b6 950a                      	dec	mpr		; 1 cycle
0002b7 f7f1                      	brne	LCDDelay_L2	; 2 cycles on branch, 1 if no branch
0002b8 951a                      	dec	r17		; 1 cycle
0002b9 f7d9                      	brne	LCDDelay_L1	; 2 cycles on branch, 1 if no branch
0002ba 911f                      	pop	r17		; 2 cycles
0002bb 910f                      	pop	mpr		; 2 cycles
0002bc 9508                      	ret			; 4 cycles
                                 
                                 ;*****************************************************************
                                 ;* Func:	div10
                                 ;* Desc:	Divides the value in the mpr by 10 and 
                                 ;*			puts the remainder in the 'r' register
                                 ;*			and the quotient in the 'q' register.
                                 ;*	DO NOT modify this function, trust me, it does
                                 ;*	divide by 10 :)  ~DZ		
                                 ;*****************************************************************
                                 div10:
0002bd 920f                      	push	r0		; Save register
                                 
                                 	; q = mpr / 10 = mpr * 0.000110011001101b
0002be 2f50                      	mov	q, mpr	; q = mpr * 1.0b
0002bf 9556                      	lsr	q		; q >> 2
0002c0 9556                      	lsr	q		; q = mpr * 0.01b
0002c1 0f50                      	add	q, mpr	; q = (q + mpr) >> 1
0002c2 9556                      	lsr	q		; q = mpr * 0.101b
0002c3 0f50                      	add	q, mpr	; q = (q + mpr) >> 3
0002c4 9556                      	lsr	q
0002c5 9556                      	lsr	q
0002c6 9556                      	lsr	q		; q = mpr * 0.001101b
0002c7 0f50                      	add	q, mpr	; q = (q + mpr) >> 1
0002c8 9556                      	lsr	q		; q = mpr * 0.1001101b
0002c9 0f50                      	add	q, mpr	; q = (q + mpr) >> 3
0002ca 9556                      	lsr	q				
0002cb 9556                      	lsr	q
0002cc 9556                      	lsr	q		; q = mpr * 0.0011001101b
0002cd 0f50                      	add	q, mpr	; q = (q + mpr) >> 1
0002ce 9556                      	lsr	q		; q = mpr * 0.10011001101b
0002cf 0f50                      	add	q, mpr	; q = (q + mpr) >> 4
0002d0 9556                      	lsr	q
0002d1 9556                      	lsr	q
0002d2 9556                      	lsr	q
0002d3 9556                      	lsr	q		; q = mpr * 0.000110011001101b
                                 
                                 	; compute the remainder as r = i - 10 * q
                                 	; calculate r = q * 10 = q * 1010b
0002d4 2f65                      	mov	r, q		; r = q * 1
0002d5 0f66                      	lsl	r		; r << 2
0002d6 0f66                      	lsl	r		; r = q * 100b
0002d7 0f65                      	add	r, q		; r = (r + q) << 1
0002d8 0f66                      	lsl	r		; r = q * 1010b
0002d9 2e06                      	mov	r0, r		; r0 = 10 * q
0002da 2f60                      	mov	r, mpr	; r = mpr
0002db 1960                      	sub	r, r0		; r = mpr - 10 * q
                                 
                                 	; Fix any errors that occur
                                 div10_1:
0002dc 306a                      	cpi	r, 10		; Compare with 10
0002dd f018                      	brlo	div10_2	; do nothing if r < 10
0002de 9553                      	inc	q		; fix quotient
0002df 506a                      	subi	r, 10		; fix remainder
0002e0 cffb                      	rjmp	div10_1	; Continue until error is corrected
                                 
                                 div10_2:
0002e1 900f                      	pop	r0		; Restore registers
0002e2 9508                      	ret			; Return from function
                                 
                                 ;*********************************************************************
                                 ;*	Bitmap Font Information
                                 ;*	Adapted into assembly code by Justin Goins.
                                 ;*	You can edit characters or add symbols if you choose (by modifying the data below)
                                 ;*	Each character is represented as a 8 x 16 pattern of dots (8 dots wide and 16 dots high).
                                 ;*	This implies that 16 bytes are allocated to represent each character.
                                 ;*
                                 ;*	The character information is arranged so that each line below equates to a single character.
                                 ;*	The first line is ASCII character 0, the next line is ASCII character 1,
                                 ;*	the next line is ASCII character 2, and so on.
                                 ;*	You can assign characters to any index within the extended ASCII range (0 to 255).
                                 ;*	With a bit of experimentation it's possible to define and display emojis (or any other graphical output).
                                 ;*	Be creative and have fun!
                                 ;*
                                 ;*	From original license file:
                                 ;*	Copyright 2011 Suraj N. Kurapati <https://github.com/sunaku/tamzen-font>
                                 ;*	Tamzen font is free.  You are hereby granted permission to use, copy, modify, and distribute it as you see fit.
                                 ;*	Tamzen font is provided "as is" without any express or implied warranty.
                                 ;*********************************************************************
                                 FontBitmap:
0002e3 0000
0002e4 f00f
0002e5 1008
0002e6 1008
0002e7 1008
0002e8 1008
0002e9 f00f
0002ea 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x0F, 0xF0, 0x00, 0x00	; U+0000
0002eb fe03
0002ec fa7f
0002ed f683
0002ee ea83
0002ef d683
0002f0 aa83
0002f1 567f
0002f2 fe03                      .DB	0x03, 0xFE, 0x7F, 0xFA, 0x83, 0xF6, 0x83, 0xEA, 0x83, 0xD6, 0x83, 0xAA, 0x7F, 0x56, 0x03, 0xFE	; U+E0A2
0002f3 5455
0002f4 aaaa
0002f5 5455
0002f6 aaaa
0002f7 5455
0002f8 aaaa
0002f9 5455
0002fa aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; U+2592
0002fb 5455
0002fc aaaa
0002fd 5455
0002fe aaaa
0002ff 5455
000300 aaaa
000301 5455
000302 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000303 5455
000304 aaaa
000305 5455
000306 aaaa
000307 5455
000308 aaaa
000309 5455
00030a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00030b 5455
00030c aaaa
00030d 5455
00030e aaaa
00030f 5455
000310 aaaa
000311 5455
000312 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000313 5455
000314 aaaa
000315 5455
000316 aaaa
000317 5455
000318 aaaa
000319 5455
00031a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00031b 0000
00031c 0007
00031d 8008
00031e 8008
00031f 8008
000320 0007
000321 0000
000322 0000                      .DB	0x00, 0x00, 0x07, 0x00, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00B0
000323 5455
000324 aaaa
000325 5455
000326 aaaa
000327 5455
000328 aaaa
000329 5455
00032a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00032b 5455
00032c aaaa
00032d 5455
00032e aaaa
00032f 5455
000330 aaaa
000331 5455
000332 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000333 5455
000334 aaaa
000335 5455
000336 aaaa
000337 5455
000338 aaaa
000339 5455
00033a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00033b 8000
00033c 8000
00033d 8000
00033e 8000
00033f 80ff
000340 0000
000341 0000
000342 0000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2518
000343 8000
000344 8000
000345 8000
000346 8000
000347 fe00
000348 0000
000349 0000
00034a 0000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2510
00034b 0000
00034c 0000
00034d 0000
00034e 0000
00034f fe00
000350 8000
000351 8000
000352 8000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+250C
000353 0000
000354 0000
000355 0000
000356 0000
000357 80ff
000358 8000
000359 8000
00035a 8000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+2514
00035b 8000
00035c 8000
00035d 8000
00035e 8000
00035f feff
000360 8000
000361 8000
000362 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+253C
000363 5455
000364 aaaa
000365 5455
000366 aaaa
000367 5455
000368 aaaa
000369 5455
00036a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00036b 5455
00036c aaaa
00036d 5455
00036e aaaa
00036f 5455
000370 aaaa
000371 5455
000372 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000373 8000
000374 8000
000375 8000
000376 8000
000377 8000
000378 8000
000379 8000
00037a 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+2500
00037b 5455
00037c aaaa
00037d 5455
00037e aaaa
00037f 5455
000380 aaaa
000381 5455
000382 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000383 5455
000384 aaaa
000385 5455
000386 aaaa
000387 5455
000388 aaaa
000389 5455
00038a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00038b 0000
00038c 0000
00038d 0000
00038e 0000
00038f feff
000390 8000
000391 8000
000392 8000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+251C
000393 8000
000394 8000
000395 8000
000396 8000
000397 feff
000398 0000
000399 0000
00039a 0000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2524
00039b 8000
00039c 8000
00039d 8000
00039e 8000
00039f 80ff
0003a0 8000
0003a1 8000
0003a2 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+2534
0003a3 8000
0003a4 8000
0003a5 8000
0003a6 8000
0003a7 fe00
0003a8 8000
0003a9 8000
0003aa 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+252C
0003ab 0000
0003ac 0000
0003ad 0000
0003ae 0000
0003af feff
0003b0 0000
0003b1 0000
0003b2 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2502
0003b3 5455
0003b4 aaaa
0003b5 5455
0003b6 aaaa
0003b7 5455
0003b8 aaaa
0003b9 5455
0003ba aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0003bb 5455
0003bc aaaa
0003bd 5455
0003be aaaa
0003bf 5455
0003c0 aaaa
0003c1 5455
0003c2 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0003c3 5455
0003c4 aaaa
0003c5 5455
0003c6 aaaa
0003c7 5455
0003c8 aaaa
0003c9 5455
0003ca aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0003cb 5455
0003cc aaaa
0003cd 5455
0003ce aaaa
0003cf 5455
0003d0 aaaa
0003d1 5455
0003d2 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0003d3 0000
0003d4 1001
0003d5 2001
0003d6 e007
0003d7 2009
0003d8 1009
0003d9 1008
0003da 2004                      .DB	0x00, 0x00, 0x01, 0x10, 0x01, 0x20, 0x07, 0xE0, 0x09, 0x20, 0x09, 0x10, 0x08, 0x10, 0x04, 0x20	; U+00A3
0003db 5455
0003dc aaaa
0003dd 5455
0003de aaaa
0003df 5455
0003e0 aaaa
0003e1 5455
0003e2 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0003e3 0000
0003e4 0000
0003e5 0000
0003e6 0000
0003e7 0000
0003e8 0000
0003e9 0000
0003ea 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0020
0003eb 0000
0003ec 0000
0003ed 0000
0003ee 301f
0003ef 0000
0003f0 0000
0003f1 0000
0003f2 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0021
0003f3 0000
0003f4 0000
0003f5 001e
0003f6 0000
0003f7 0000
0003f8 001e
0003f9 0000
0003fa 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0022
0003fb 0000
0003fc 4002
0003fd f00f
0003fe 4002
0003ff 4002
000400 f00f
000401 4002
000402 0000                      .DB	0x00, 0x00, 0x02, 0x40, 0x0F, 0xF0, 0x02, 0x40, 0x02, 0x40, 0x0F, 0xF0, 0x02, 0x40, 0x00, 0x00	; U+0023
000403 0000
000404 0000
000405 2006
000406 2009
000407 3839
000408 2009
000409 c008
00040a 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x06, 0x20, 0x09, 0x20, 0x39, 0x38, 0x09, 0x20, 0x08, 0xC0, 0x00, 0x00	; U+0024
00040b 0000
00040c 200c
00040d 4012
00040e 8012
00040f 600d
000410 9002
000411 9004
000412 6008                      .DB	0x00, 0x00, 0x0C, 0x20, 0x12, 0x40, 0x12, 0x80, 0x0D, 0x60, 0x02, 0x90, 0x04, 0x90, 0x08, 0x60	; U+0025
000413 0000
000414 e00c
000415 1013
000416 1013
000417 900c
000418 6000
000419 6000
00041a 9001                      .DB	0x00, 0x00, 0x0C, 0xE0, 0x13, 0x10, 0x13, 0x10, 0x0C, 0x90, 0x00, 0x60, 0x00, 0x60, 0x01, 0x90	; U+0026
00041b 0000
00041c 0000
00041d 0000
00041e 001e
00041f 0000
000420 0000
000421 0000
000422 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0027
000423 0000
000424 0000
000425 0000
000426 e003
000427 180c
000428 0410
000429 0000
00042a 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x0C, 0x18, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00	; U+0028
00042b 0000
00042c 0000
00042d 0410
00042e 180c
00042f e003
000430 0000
000431 0000
000432 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x10, 0x04, 0x0C, 0x18, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0029
000433 0000
000434 8000
000435 a002
000436 c001
000437 c001
000438 a002
000439 8000
00043a 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x02, 0xA0, 0x01, 0xC0, 0x01, 0xC0, 0x02, 0xA0, 0x00, 0x80, 0x00, 0x00	; U+002A
00043b 0000
00043c 8000
00043d 8000
00043e 8000
00043f f007
000440 8000
000441 8000
000442 8000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x07, 0xF0, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+002B
000443 0000
000444 0000
000445 0000
000446 3200
000447 3c00
000448 0000
000449 0000
00044a 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+002C
00044b 0000
00044c 8000
00044d 8000
00044e 8000
00044f 8000
000450 8000
000451 8000
000452 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00	; U+002D
000453 0000
000454 0000
000455 0000
000456 3000
000457 3000
000458 0000
000459 0000
00045a 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+002E
00045b 0000
00045c 0c00
00045d 3000
00045e c000
00045f 0003
000460 000c
000461 0000
000462 0000                      .DB	0x00, 0x00, 0x00, 0x0C, 0x00, 0x30, 0x00, 0xC0, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00	; U+002F
000463 0000
000464 e007
000465 5008
000466 9008
000467 1009
000468 100a
000469 e007
00046a 0000                      .DB	0x00, 0x00, 0x07, 0xE0, 0x08, 0x50, 0x08, 0x90, 0x09, 0x10, 0x0A, 0x10, 0x07, 0xE0, 0x00, 0x00	; U+0030
00046b 0000
00046c 0000
00046d 1002
00046e 1004
00046f f00f
000470 1000
000471 1000
000472 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x04, 0x10, 0x0F, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+0031
000473 0000
000474 1004
000475 3008
000476 5008
000477 9008
000478 1009
000479 1006
00047a 0000                      .DB	0x00, 0x00, 0x04, 0x10, 0x08, 0x30, 0x08, 0x50, 0x08, 0x90, 0x09, 0x10, 0x06, 0x10, 0x00, 0x00	; U+0032
00047b 0000
00047c 2008
00047d 1008
00047e 1009
00047f 100b
000480 100d
000481 e008
000482 0000                      .DB	0x00, 0x00, 0x08, 0x20, 0x08, 0x10, 0x09, 0x10, 0x0B, 0x10, 0x0D, 0x10, 0x08, 0xE0, 0x00, 0x00	; U+0033
000483 0000
000484 c000
000485 4001
000486 4002
000487 4004
000488 f00f
000489 4000
00048a 0000                      .DB	0x00, 0x00, 0x00, 0xC0, 0x01, 0x40, 0x02, 0x40, 0x04, 0x40, 0x0F, 0xF0, 0x00, 0x40, 0x00, 0x00	; U+0034
00048b 0000
00048c 200f
00048d 1009
00048e 1009
00048f 1009
000490 1009
000491 e008
000492 0000                      .DB	0x00, 0x00, 0x0F, 0x20, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0xE0, 0x00, 0x00	; U+0035
000493 0000
000494 e003
000495 1005
000496 1009
000497 1009
000498 1001
000499 e000
00049a 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x05, 0x10, 0x09, 0x10, 0x09, 0x10, 0x01, 0x10, 0x00, 0xE0, 0x00, 0x00	; U+0036
00049b 0000
00049c 0008
00049d 0008
00049e 3008
00049f c008
0004a0 000b
0004a1 000c
0004a2 0000                      .DB	0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x30, 0x08, 0xC0, 0x0B, 0x00, 0x0C, 0x00, 0x00, 0x00	; U+0037
0004a3 0000
0004a4 e006
0004a5 1009
0004a6 1009
0004a7 1009
0004a8 1009
0004a9 e006
0004aa 0000                      .DB	0x00, 0x00, 0x06, 0xE0, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x06, 0xE0, 0x00, 0x00	; U+0038
0004ab 0000
0004ac 0007
0004ad 8008
0004ae 9008
0004af 9008
0004b0 a008
0004b1 c007
0004b2 0000                      .DB	0x00, 0x00, 0x07, 0x00, 0x08, 0x80, 0x08, 0x90, 0x08, 0x90, 0x08, 0xA0, 0x07, 0xC0, 0x00, 0x00	; U+0039
0004b3 0000
0004b4 0000
0004b5 0000
0004b6 3006
0004b7 3006
0004b8 0000
0004b9 0000
0004ba 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x30, 0x06, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+003A
0004bb 0000
0004bc 0000
0004bd 0000
0004be 3206
0004bf 3c06
0004c0 0000
0004c1 0000
0004c2 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x32, 0x06, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+003B
0004c3 0000
0004c4 0000
0004c5 8000
0004c6 4001
0004c7 2002
0004c8 1004
0004c9 0000
0004ca 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00	; U+003C
0004cb 0000
0004cc 4002
0004cd 4002
0004ce 4002
0004cf 4002
0004d0 4002
0004d1 4002
0004d2 0000                      .DB	0x00, 0x00, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x00, 0x00	; U+003D
0004d3 0000
0004d4 0000
0004d5 1004
0004d6 2002
0004d7 4001
0004d8 8000
0004d9 0000
0004da 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x02, 0x20, 0x01, 0x40, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00	; U+003E
0004db 0000
0004dc 0008
0004dd 0010
0004de 3011
0004df 0012
0004e0 0014
0004e1 0008
0004e2 0000                      .DB	0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x11, 0x30, 0x12, 0x00, 0x14, 0x00, 0x08, 0x00, 0x00, 0x00	; U+003F
0004e3 0000
0004e4 f007
0004e5 0808
0004e6 c411
0004e7 2412
0004e8 2412
0004e9 440a
0004ea e407                      .DB	0x00, 0x00, 0x07, 0xF0, 0x08, 0x08, 0x11, 0xC4, 0x12, 0x24, 0x12, 0x24, 0x0A, 0x44, 0x07, 0xE4	; U+0040
0004eb 0000
0004ec f003
0004ed 8004
0004ee 8008
0004ef 8008
0004f0 8004
0004f1 f003
0004f2 0000                      .DB	0x00, 0x00, 0x03, 0xF0, 0x04, 0x80, 0x08, 0x80, 0x08, 0x80, 0x04, 0x80, 0x03, 0xF0, 0x00, 0x00	; U+0041
0004f3 0000
0004f4 f00f
0004f5 1009
0004f6 1009
0004f7 1009
0004f8 1009
0004f9 e006
0004fa 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x06, 0xE0, 0x00, 0x00	; U+0042
0004fb 0000
0004fc c003
0004fd 2004
0004fe 1008
0004ff 1008
000500 1008
000501 1008
000502 0000                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+0043
000503 0000
000504 f00f
000505 1008
000506 1008
000507 1008
000508 2004
000509 c003
00050a 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x04, 0x20, 0x03, 0xC0, 0x00, 0x00	; U+0044
00050b 0000
00050c f00f
00050d 1009
00050e 1009
00050f 1009
000510 1009
000511 1008
000512 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10, 0x00, 0x00	; U+0045
000513 0000
000514 f00f
000515 0009
000516 0009
000517 0009
000518 0009
000519 0008
00051a 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00	; U+0046
00051b 0000
00051c c003
00051d 2004
00051e 1008
00051f 1008
000520 9008
000521 f008
000522 0000                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x08, 0x10, 0x08, 0x10, 0x08, 0x90, 0x08, 0xF0, 0x00, 0x00	; U+0047
000523 0000
000524 f00f
000525 0001
000526 0001
000527 0001
000528 0001
000529 f00f
00052a 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x0F, 0xF0, 0x00, 0x00	; U+0048
00052b 0000
00052c 0000
00052d 1008
00052e 1008
00052f f00f
000530 1008
000531 1008
000532 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x08, 0x10, 0x0F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+0049
000533 0000
000534 6000
000535 1000
000536 1000
000537 1000
000538 1000
000539 e00f
00053a 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+004A
00053b 0000
00053c f00f
00053d 8001
00053e 8001
00053f 4002
000540 2004
000541 1008
000542 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x01, 0x80, 0x01, 0x80, 0x02, 0x40, 0x04, 0x20, 0x08, 0x10, 0x00, 0x00	; U+004B
000543 0000
000544 f00f
000545 1000
000546 1000
000547 1000
000548 1000
000549 1000
00054a 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+004C
00054b 0000
00054c f00f
00054d 0004
00054e 0002
00054f 8001
000550 0002
000551 0004
000552 f00f                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x04, 0x00, 0x02, 0x00, 0x01, 0x80, 0x02, 0x00, 0x04, 0x00, 0x0F, 0xF0	; U+004D
000553 0000
000554 f00f
000555 0004
000556 0002
000557 0001
000558 8000
000559 f00f
00055a 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x04, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x80, 0x0F, 0xF0, 0x00, 0x00	; U+004E
00055b 0000
00055c e007
00055d 1008
00055e 1008
00055f 1008
000560 1008
000561 e007
000562 0000                      .DB	0x00, 0x00, 0x07, 0xE0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x07, 0xE0, 0x00, 0x00	; U+004F
000563 0000
000564 f00f
000565 8008
000566 8008
000567 8008
000568 8008
000569 0007
00056a 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x07, 0x00, 0x00, 0x00	; U+0050
00056b 0000
00056c e007
00056d 1008
00056e 1008
00056f 1008
000570 1808
000571 e407
000572 0000                      .DB	0x00, 0x00, 0x07, 0xE0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x18, 0x07, 0xE4, 0x00, 0x00	; U+0051
000573 0000
000574 f00f
000575 8008
000576 8008
000577 c008
000578 a008
000579 1007
00057a 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x80, 0x08, 0x80, 0x08, 0xC0, 0x08, 0xA0, 0x07, 0x10, 0x00, 0x00	; U+0052
00057b 0000
00057c 1006
00057d 1009
00057e 1009
00057f 9008
000580 9008
000581 6008
000582 0000                      .DB	0x00, 0x00, 0x06, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0x90, 0x08, 0x90, 0x08, 0x60, 0x00, 0x00	; U+0053
000583 0000
000584 0008
000585 0008
000586 0008
000587 f00f
000588 0008
000589 0008
00058a 0008                      .DB	0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x0F, 0xF0, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00	; U+0054
00058b 0000
00058c e00f
00058d 1000
00058e 1000
00058f 1000
000590 1000
000591 e00f
000592 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+0055
000593 0000
000594 000f
000595 c000
000596 3000
000597 3000
000598 c000
000599 000f
00059a 0000                      .DB	0x00, 0x00, 0x0F, 0x00, 0x00, 0xC0, 0x00, 0x30, 0x00, 0x30, 0x00, 0xC0, 0x0F, 0x00, 0x00, 0x00	; U+0056
00059b 0000
00059c f00f
00059d 1000
00059e 2000
00059f c000
0005a0 2000
0005a1 1000
0005a2 f00f                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0x00, 0x20, 0x00, 0xC0, 0x00, 0x20, 0x00, 0x10, 0x0F, 0xF0	; U+0057
0005a3 0000
0005a4 300c
0005a5 4002
0005a6 8001
0005a7 8001
0005a8 4002
0005a9 300c
0005aa 0000                      .DB	0x00, 0x00, 0x0C, 0x30, 0x02, 0x40, 0x01, 0x80, 0x01, 0x80, 0x02, 0x40, 0x0C, 0x30, 0x00, 0x00	; U+0058
0005ab 0000
0005ac 000c
0005ad 0002
0005ae 0001
0005af f000
0005b0 0001
0005b1 0002
0005b2 000c                      .DB	0x00, 0x00, 0x0C, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x0C, 0x00	; U+0059
0005b3 0000
0005b4 3008
0005b5 5008
0005b6 9008
0005b7 1009
0005b8 100a
0005b9 100c
0005ba 1008                      .DB	0x00, 0x00, 0x08, 0x30, 0x08, 0x50, 0x08, 0x90, 0x09, 0x10, 0x0A, 0x10, 0x0C, 0x10, 0x08, 0x10	; U+005A
0005bb 0000
0005bc 0000
0005bd 0000
0005be fc1f
0005bf 0410
0005c0 0410
0005c1 0410
0005c2 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFC, 0x10, 0x04, 0x10, 0x04, 0x10, 0x04, 0x00, 0x00	; U+005B
0005c3 0000
0005c4 000c
0005c5 0003
0005c6 c000
0005c7 3000
0005c8 0c00
0005c9 0000
0005ca 0000                      .DB	0x00, 0x00, 0x0C, 0x00, 0x03, 0x00, 0x00, 0xC0, 0x00, 0x30, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00	; U+005C
0005cb 0000
0005cc 0410
0005cd 0410
0005ce 0410
0005cf fc1f
0005d0 0000
0005d1 0000
0005d2 0000                      .DB	0x00, 0x00, 0x10, 0x04, 0x10, 0x04, 0x10, 0x04, 0x1F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+005D
0005d3 0000
0005d4 0002
0005d5 0004
0005d6 0008
0005d7 0004
0005d8 0002
0005d9 0000
0005da 0000                      .DB	0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00	; U+005E
0005db 0400
0005dc 0400
0005dd 0400
0005de 0400
0005df 0400
0005e0 0400
0005e1 0400
0005e2 0400                      .DB	0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04	; U+005F
0005e3 0000
0005e4 0000
0005e5 0000
0005e6 0010
0005e7 0008
0005e8 0004
0005e9 0000
0005ea 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0060
0005eb 0000
0005ec 6000
0005ed 9002
0005ee 9002
0005ef 9002
0005f0 9002
0005f1 f001
0005f2 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+0061
0005f3 0000
0005f4 f01f
0005f5 1001
0005f6 1002
0005f7 1002
0005f8 1002
0005f9 e001
0005fa 0000                      .DB	0x00, 0x00, 0x1F, 0xF0, 0x01, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+0062
0005fb 0000
0005fc e001
0005fd 1002
0005fe 1002
0005ff 1002
000600 1002
000601 2001
000602 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0x20, 0x00, 0x00	; U+0063
000603 0000
000604 e001
000605 1002
000606 1002
000607 1002
000608 2002
000609 f01f
00060a 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x20, 0x1F, 0xF0, 0x00, 0x00	; U+0064
00060b 0000
00060c e001
00060d 9002
00060e 9002
00060f 9002
000610 9002
000611 9001
000612 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0x90, 0x00, 0x00	; U+0065
000613 0000
000614 0002
000615 0002
000616 f00f
000617 0012
000618 0012
000619 0012
00061a 0000                      .DB	0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0F, 0xF0, 0x12, 0x00, 0x12, 0x00, 0x12, 0x00, 0x00, 0x00	; U+0066
00061b 0000
00061c e001
00061d 1202
00061e 1202
00061f 1202
000620 1202
000621 fc03
000622 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x12, 0x02, 0x12, 0x02, 0x12, 0x02, 0x12, 0x03, 0xFC, 0x00, 0x00	; U+0067
000623 0000
000624 f01f
000625 0001
000626 0002
000627 0002
000628 0002
000629 f001
00062a 0000                      .DB	0x00, 0x00, 0x1F, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0, 0x00, 0x00	; U+0068
00062b 0000
00062c 0000
00062d 1002
00062e 1002
00062f f01b
000630 1000
000631 1000
000632 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x02, 0x10, 0x1B, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+0069
000633 0000
000634 0000
000635 0200
000636 0202
000637 0202
000638 fc1b
000639 0000
00063a 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x1B, 0xFC, 0x00, 0x00, 0x00, 0x00	; U+006A
00063b 0000
00063c f01f
00063d 4000
00063e 8000
00063f 4001
000640 2002
000641 1000
000642 0000                      .DB	0x00, 0x00, 0x1F, 0xF0, 0x00, 0x40, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x00, 0x10, 0x00, 0x00	; U+006B
000643 0000
000644 0010
000645 0010
000646 e01f
000647 1000
000648 1000
000649 1000
00064a 0000                      .DB	0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x1F, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+006c
00064b 0000
00064c f003
00064d 0002
00064e 0002
00064f f001
000650 0002
000651 0002
000652 f001                      .DB	0x00, 0x00, 0x03, 0xF0, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0	; U+006d
000653 0000
000654 f003
000655 0001
000656 0002
000657 0002
000658 0002
000659 f001
00065a 0000                      .DB	0x00, 0x00, 0x03, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0, 0x00, 0x00	; U+006e
00065b 0000
00065c e001
00065d 1002
00065e 1002
00065f 1002
000660 1002
000661 e001
000662 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+006F
000663 0000
000664 fe03
000665 1001
000666 1002
000667 1002
000668 1002
000669 e001
00066a 0000                      .DB	0x00, 0x00, 0x03, 0xFE, 0x01, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+0070
00066b 0000
00066c e001
00066d 1002
00066e 1002
00066f 1002
000670 2002
000671 fe03
000672 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x20, 0x03, 0xFE, 0x00, 0x00	; U+0071
000673 0000
000674 f003
000675 0001
000676 0002
000677 0002
000678 0002
000679 0001
00067a 0000                      .DB	0x00, 0x00, 0x03, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00	; U+0072
00067b 0000
00067c 1001
00067d 9002
00067e 9002
00067f 5002
000680 5002
000681 2002
000682 0000                      .DB	0x00, 0x00, 0x01, 0x10, 0x02, 0x90, 0x02, 0x90, 0x02, 0x50, 0x02, 0x50, 0x02, 0x20, 0x00, 0x00	; U+0073
000683 0000
000684 0002
000685 0002
000686 e00f
000687 1002
000688 1002
000689 1002
00068a 0000                      .DB	0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0F, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x00, 0x00	; U+0074
00068b 0000
00068c e003
00068d 1000
00068e 1000
00068f 1000
000690 2000
000691 f003
000692 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x03, 0xF0, 0x00, 0x00	; U+0075
000693 0000
000694 0003
000695 c000
000696 3000
000697 3000
000698 c000
000699 0003
00069a 0000                      .DB	0x00, 0x00, 0x03, 0x00, 0x00, 0xC0, 0x00, 0x30, 0x00, 0x30, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x00	; U+0076
00069b 0000
00069c e003
00069d 1000
00069e 1000
00069f e001
0006a0 1000
0006a1 1000
0006a2 e003                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x01, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x03, 0xE0	; U+0077
0006a3 0000
0006a4 1002
0006a5 2001
0006a6 c000
0006a7 c000
0006a8 2001
0006a9 1002
0006aa 0000                      .DB	0x00, 0x00, 0x02, 0x10, 0x01, 0x20, 0x00, 0xC0, 0x00, 0xC0, 0x01, 0x20, 0x02, 0x10, 0x00, 0x00	; U+0078
0006ab 0000
0006ac e003
0006ad 1200
0006ae 1200
0006af 1200
0006b0 2200
0006b1 fc03
0006b2 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x12, 0x00, 0x12, 0x00, 0x12, 0x00, 0x22, 0x03, 0xFC, 0x00, 0x00	; U+0079
0006b3 0000
0006b4 1002
0006b5 3002
0006b6 5002
0006b7 9002
0006b8 1003
0006b9 1002
0006ba 0000                      .DB	0x00, 0x00, 0x02, 0x10, 0x02, 0x30, 0x02, 0x50, 0x02, 0x90, 0x03, 0x10, 0x02, 0x10, 0x00, 0x00	; U+007A
0006bb 0000
0006bc 0000
0006bd 8000
0006be 8000
0006bf 780f
0006c0 0410
0006c1 0410
0006c2 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x0F, 0x78, 0x10, 0x04, 0x10, 0x04, 0x00, 0x00	; U+007B
0006c3 0000
0006c4 0000
0006c5 0000
0006c6 0000
0006c7 fc3f
0006c8 0000
0006c9 0000
0006ca 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+007C
0006cb 0000
0006cc 0410
0006cd 0410
0006ce 780f
0006cf 8000
0006d0 8000
0006d1 0000
0006d2 0000                      .DB	0x00, 0x00, 0x10, 0x04, 0x10, 0x04, 0x0F, 0x78, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00	; U+007D
0006d3 0000
0006d4 0006
0006d5 0008
0006d6 0008
0006d7 0004
0006d8 0002
0006d9 0002
0006da 000c                      .DB	0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0C, 0x00	; U+007E
0006db 5455
0006dc aaaa
0006dd 5455
0006de aaaa
0006df 5455
0006e0 aaaa
0006e1 5455
0006e2 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0006e3 5455
0006e4 aaaa
0006e5 5455
0006e6 aaaa
0006e7 5455
0006e8 aaaa
0006e9 5455
0006ea aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0006eb 5455
0006ec aaaa
0006ed 5455
0006ee aaaa
0006ef 5455
0006f0 aaaa
0006f1 5455
0006f2 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0006f3 5455
0006f4 aaaa
0006f5 5455
0006f6 aaaa
0006f7 5455
0006f8 aaaa
0006f9 5455
0006fa aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0006fb 5455
0006fc aaaa
0006fd 5455
0006fe aaaa
0006ff 5455
000700 aaaa
000701 5455
000702 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000703 5455
000704 aaaa
000705 5455
000706 aaaa
000707 5455
000708 aaaa
000709 5455
00070a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00070b 5455
00070c aaaa
00070d 5455
00070e aaaa
00070f 5455
000710 aaaa
000711 5455
000712 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000713 5455
000714 aaaa
000715 5455
000716 aaaa
000717 5455
000718 aaaa
000719 5455
00071a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00071b 5455
00071c aaaa
00071d 5455
00071e aaaa
00071f 5455
000720 aaaa
000721 5455
000722 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000723 5455
000724 aaaa
000725 5455
000726 aaaa
000727 5455
000728 aaaa
000729 5455
00072a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00072b 5455
00072c aaaa
00072d 5455
00072e aaaa
00072f 5455
000730 aaaa
000731 5455
000732 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000733 5455
000734 aaaa
000735 5455
000736 aaaa
000737 5455
000738 aaaa
000739 5455
00073a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00073b 5455
00073c aaaa
00073d 5455
00073e aaaa
00073f 5455
000740 aaaa
000741 5455
000742 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000743 5455
000744 aaaa
000745 5455
000746 aaaa
000747 5455
000748 aaaa
000749 5455
00074a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00074b 5455
00074c aaaa
00074d 5455
00074e aaaa
00074f 5455
000750 aaaa
000751 5455
000752 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000753 5455
000754 aaaa
000755 5455
000756 aaaa
000757 5455
000758 aaaa
000759 5455
00075a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00075b 5455
00075c aaaa
00075d 5455
00075e aaaa
00075f 5455
000760 aaaa
000761 5455
000762 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000763 5455
000764 aaaa
000765 5455
000766 aaaa
000767 5455
000768 aaaa
000769 5455
00076a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00076b 5455
00076c aaaa
00076d 5455
00076e aaaa
00076f 5455
000770 aaaa
000771 5455
000772 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000773 5455
000774 aaaa
000775 5455
000776 aaaa
000777 5455
000778 aaaa
000779 5455
00077a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00077b 5455
00077c aaaa
00077d 5455
00077e aaaa
00077f 5455
000780 aaaa
000781 5455
000782 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000783 5455
000784 aaaa
000785 5455
000786 aaaa
000787 5455
000788 aaaa
000789 5455
00078a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00078b 5455
00078c aaaa
00078d 5455
00078e aaaa
00078f 5455
000790 aaaa
000791 5455
000792 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000793 5455
000794 aaaa
000795 5455
000796 aaaa
000797 5455
000798 aaaa
000799 5455
00079a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00079b 5455
00079c aaaa
00079d 5455
00079e aaaa
00079f 5455
0007a0 aaaa
0007a1 5455
0007a2 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007a3 5455
0007a4 aaaa
0007a5 5455
0007a6 aaaa
0007a7 5455
0007a8 aaaa
0007a9 5455
0007aa aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007ab 5455
0007ac aaaa
0007ad 5455
0007ae aaaa
0007af 5455
0007b0 aaaa
0007b1 5455
0007b2 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007b3 5455
0007b4 aaaa
0007b5 5455
0007b6 aaaa
0007b7 5455
0007b8 aaaa
0007b9 5455
0007ba aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007bb 5455
0007bc aaaa
0007bd 5455
0007be aaaa
0007bf 5455
0007c0 aaaa
0007c1 5455
0007c2 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007c3 5455
0007c4 aaaa
0007c5 5455
0007c6 aaaa
0007c7 5455
0007c8 aaaa
0007c9 5455
0007ca aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007cb 5455
0007cc aaaa
0007cd 5455
0007ce aaaa
0007cf 5455
0007d0 aaaa
0007d1 5455
0007d2 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007d3 5455
0007d4 aaaa
0007d5 5455
0007d6 aaaa
0007d7 5455
0007d8 aaaa
0007d9 5455
0007da aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007db 5455
0007dc aaaa
0007dd 5455
0007de aaaa
0007df 5455
0007e0 aaaa
0007e1 5455
0007e2 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007e3 0000
0007e4 0000
0007e5 0000
0007e6 0000
0007e7 0000
0007e8 0000
0007e9 0000
0007ea 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A0
0007eb 0000
0007ec 0000
0007ed 0000
0007ee 3e03
0007ef 0000
0007f0 0000
0007f1 0000
0007f2 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A1
0007f3 0000
0007f4 c003
0007f5 2004
0007f6 2004
0007f7 f81f
0007f8 2004
0007f9 2004
0007fa 4002                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x04, 0x20, 0x1F, 0xF8, 0x04, 0x20, 0x04, 0x20, 0x02, 0x40	; U+00A2
0007fb 0000
0007fc 1001
0007fd 2001
0007fe e007
0007ff 2009
000800 1009
000801 1008
000802 2004                      .DB	0x00, 0x00, 0x01, 0x10, 0x01, 0x20, 0x07, 0xE0, 0x09, 0x20, 0x09, 0x10, 0x08, 0x10, 0x04, 0x20	; U+00A3
000803 0000
000804 2004
000805 c003
000806 4002
000807 4002
000808 c003
000809 2004
00080a 0000                      .DB	0x00, 0x00, 0x04, 0x20, 0x03, 0xC0, 0x02, 0x40, 0x02, 0x40, 0x03, 0xC0, 0x04, 0x20, 0x00, 0x00	; U+00A4
00080b 0000
00080c 0008
00080d 4005
00080e 4003
00080f f001
000810 4003
000811 4005
000812 0008                      .DB	0x00, 0x00, 0x08, 0x00, 0x05, 0x40, 0x03, 0x40, 0x01, 0xF0, 0x03, 0x40, 0x05, 0x40, 0x08, 0x00	; U+00A5
000813 0000
000814 0000
000815 0000
000816 0000
000817 3c0f
000818 0000
000819 0000
00081a 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A6
00081b 5455
00081c aaaa
00081d 5455
00081e aaaa
00081f 5455
000820 aaaa
000821 5455
000822 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000823 0000
000824 0000
000825 0060
000826 0000
000827 0000
000828 0060
000829 0000
00082a 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A8
00082b 0000
00082c c003
00082d 2004
00082e 9009
00082f 500a
000830 500a
000831 2004
000832 c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x09, 0x90, 0x0A, 0x50, 0x0A, 0x50, 0x04, 0x20, 0x03, 0xC0	; U+00A9
000833 5455
000834 aaaa
000835 5455
000836 aaaa
000837 5455
000838 aaaa
000839 5455
00083a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00083b 0000
00083c 8000
00083d 4001
00083e 2002
00083f 9004
000840 4001
000841 2002
000842 1004                      .DB	0x00, 0x00, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x04, 0x90, 0x01, 0x40, 0x02, 0x20, 0x04, 0x10	; U+00AB
000843 5455
000844 aaaa
000845 5455
000846 aaaa
000847 5455
000848 aaaa
000849 5455
00084a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00084b 0000
00084c 8000
00084d 8000
00084e 8000
00084f 8000
000850 8000
000851 8000
000852 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00	; U+00AD
000853 5455
000854 aaaa
000855 5455
000856 aaaa
000857 5455
000858 aaaa
000859 5455
00085a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00085b 5455
00085c aaaa
00085d 5455
00085e aaaa
00085f 5455
000860 aaaa
000861 5455
000862 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000863 0000
000864 0007
000865 8008
000866 8008
000867 8008
000868 0007
000869 0000
00086a 0000                      .DB	0x00, 0x00, 0x07, 0x00, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00B0
00086b 5455
00086c aaaa
00086d 5455
00086e aaaa
00086f 5455
000870 aaaa
000871 5455
000872 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000873 5455
000874 aaaa
000875 5455
000876 aaaa
000877 5455
000878 aaaa
000879 5455
00087a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00087b 5455
00087c aaaa
00087d 5455
00087e aaaa
00087f 5455
000880 aaaa
000881 5455
000882 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000883 5455
000884 aaaa
000885 5455
000886 aaaa
000887 5455
000888 aaaa
000889 5455
00088a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00088b 5455
00088c aaaa
00088d 5455
00088e aaaa
00088f 5455
000890 aaaa
000891 5455
000892 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000893 5455
000894 aaaa
000895 5455
000896 aaaa
000897 5455
000898 aaaa
000899 5455
00089a aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
00089b 5455
00089c aaaa
00089d 5455
00089e aaaa
00089f 5455
0008a0 aaaa
0008a1 5455
0008a2 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008a3 0000
0008a4 0000
0008a5 0200
0008a6 0200
0008a7 0c00
0008a8 0000
0008a9 0000
0008aa 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00B8
0008ab 5455
0008ac aaaa
0008ad 5455
0008ae aaaa
0008af 5455
0008b0 aaaa
0008b1 5455
0008b2 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008b3 5455
0008b4 aaaa
0008b5 5455
0008b6 aaaa
0008b7 5455
0008b8 aaaa
0008b9 5455
0008ba aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008bb 0000
0008bc 1004
0008bd 2002
0008be 4001
0008bf 9004
0008c0 2002
0008c1 4001
0008c2 8000                      .DB	0x00, 0x00, 0x04, 0x10, 0x02, 0x20, 0x01, 0x40, 0x04, 0x90, 0x02, 0x20, 0x01, 0x40, 0x00, 0x80	; U+00BB
0008c3 5455
0008c4 aaaa
0008c5 5455
0008c6 aaaa
0008c7 5455
0008c8 aaaa
0008c9 5455
0008ca aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008cb 5455
0008cc aaaa
0008cd 5455
0008ce aaaa
0008cf 5455
0008d0 aaaa
0008d1 5455
0008d2 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008d3 5455
0008d4 aaaa
0008d5 5455
0008d6 aaaa
0008d7 5455
0008d8 aaaa
0008d9 5455
0008da aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0008db 0000
0008dc 0000
0008dd 0c00
0008de 1200
0008df 2203
0008e0 0200
0008e1 0400
0008e2 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x12, 0x03, 0x22, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00	; U+00BF
0008e3 0000
0008e4 7000
0008e5 c043
0008e6 402c
0008e7 400c
0008e8 c003
0008e9 7000
0008ea 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x43, 0xC0, 0x2C, 0x40, 0x0C, 0x40, 0x03, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C0
0008eb 0000
0008ec 7000
0008ed c003
0008ee 400c
0008ef 402c
0008f0 c043
0008f1 7000
0008f2 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x03, 0xC0, 0x0C, 0x40, 0x2C, 0x40, 0x43, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C1
0008f3 0000
0008f4 7000
0008f5 c023
0008f6 404c
0008f7 404c
0008f8 c023
0008f9 7000
0008fa 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x23, 0xC0, 0x4C, 0x40, 0x4C, 0x40, 0x23, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C2
0008fb 0000
0008fc 7020
0008fd c043
0008fe 404c
0008ff 402c
000900 c023
000901 7040
000902 0000                      .DB	0x00, 0x00, 0x20, 0x70, 0x43, 0xC0, 0x4C, 0x40, 0x2C, 0x40, 0x23, 0xC0, 0x40, 0x70, 0x00, 0x00	; U+00C3
000903 0000
000904 7000
000905 c063
000906 400c
000907 400c
000908 c063
000909 7000
00090a 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x63, 0xC0, 0x0C, 0x40, 0x0C, 0x40, 0x63, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C4
00090b 0000
00090c 7000
00090d c033
00090e 404c
00090f 404c
000910 c033
000911 7000
000912 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x33, 0xC0, 0x4C, 0x40, 0x4C, 0x40, 0x33, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C5
000913 0000
000914 7000
000915 c003
000916 400c
000917 f00f
000918 1009
000919 1009
00091a 1008                      .DB	0x00, 0x00, 0x00, 0x70, 0x03, 0xC0, 0x0C, 0x40, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10	; U+00C6
00091b 0000
00091c c003
00091d 2204
00091e 1208
00091f 1c08
000920 1008
000921 1008
000922 0000                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x22, 0x08, 0x12, 0x08, 0x1C, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00C7
000923 0000
000924 f00f
000925 1049
000926 1029
000927 1009
000928 1009
000929 1008
00092a 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x49, 0x10, 0x29, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00C8
00092b 0000
00092c f00f
00092d 1009
00092e 1009
00092f 1029
000930 1049
000931 1008
000932 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x29, 0x10, 0x49, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00C9
000933 0000
000934 f00f
000935 1029
000936 1049
000937 1049
000938 1029
000939 1008
00093a 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x29, 0x10, 0x49, 0x10, 0x49, 0x10, 0x29, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CA
00093b 0000
00093c f00f
00093d 1069
00093e 1009
00093f 1009
000940 1069
000941 1008
000942 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x69, 0x10, 0x09, 0x10, 0x09, 0x10, 0x69, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CB
000943 0000
000944 0000
000945 1008
000946 1048
000947 f02f
000948 1008
000949 1008
00094a 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x48, 0x10, 0x2F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CC
00094b 0000
00094c 0000
00094d 1008
00094e 1008
00094f f02f
000950 1048
000951 1008
000952 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x08, 0x10, 0x2F, 0xF0, 0x48, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CD
000953 0000
000954 0000
000955 1008
000956 1028
000957 f04f
000958 1028
000959 1008
00095a 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x28, 0x10, 0x4F, 0xF0, 0x28, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CE
00095b 0000
00095c 0000
00095d 1008
00095e 1068
00095f f00f
000960 1068
000961 1008
000962 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x68, 0x10, 0x0F, 0xF0, 0x68, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CF
000963 0000
000964 0001
000965 f00f
000966 1009
000967 1009
000968 1008
000969 2004
00096a c003                      .DB	0x00, 0x00, 0x01, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D0
00096b 0000
00096c f02f
00096d 0044
00096e 0042
00096f 0021
000970 8020
000971 f04f
000972 0000                      .DB	0x00, 0x00, 0x2F, 0xF0, 0x44, 0x00, 0x42, 0x00, 0x21, 0x00, 0x20, 0x80, 0x4F, 0xF0, 0x00, 0x00	; U+00D1
000973 0000
000974 c003
000975 2004
000976 1048
000977 1028
000978 1008
000979 2004
00097a c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x48, 0x10, 0x28, 0x10, 0x08, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D2
00097b 0000
00097c c003
00097d 2004
00097e 1008
00097f 1028
000980 1048
000981 2004
000982 c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x08, 0x10, 0x28, 0x10, 0x48, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D3
000983 0000
000984 c003
000985 2004
000986 1028
000987 1048
000988 1028
000989 2004
00098a c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x28, 0x10, 0x48, 0x10, 0x28, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D4
00098b 0000
00098c c003
00098d 2024
00098e 1048
00098f 1048
000990 1028
000991 2024
000992 c043                      .DB	0x00, 0x00, 0x03, 0xC0, 0x24, 0x20, 0x48, 0x10, 0x48, 0x10, 0x28, 0x10, 0x24, 0x20, 0x43, 0xC0	; U+00D5
000993 0000
000994 c003
000995 2064
000996 1008
000997 1008
000998 1008
000999 2064
00099a c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x64, 0x20, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x64, 0x20, 0x03, 0xC0	; U+00D6
00099b 0000
00099c 0000
00099d 2002
00099e 4001
00099f 8000
0009a0 4001
0009a1 2002
0009a2 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x20, 0x01, 0x40, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x00, 0x00	; U+00D7
0009a3 0000
0009a4 c803
0009a5 3004
0009a6 5008
0009a7 9009
0009a8 100a
0009a9 200c
0009aa c013                      .DB	0x00, 0x00, 0x03, 0xC8, 0x04, 0x30, 0x08, 0x50, 0x09, 0x90, 0x0A, 0x10, 0x0C, 0x20, 0x13, 0xC0	; U+00D8
0009ab 0000
0009ac e00f
0009ad 1040
0009ae 1020
0009af 1000
0009b0 1000
0009b1 e00f
0009b2 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x40, 0x10, 0x20, 0x10, 0x00, 0x10, 0x00, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00D9
0009b3 0000
0009b4 e00f
0009b5 1000
0009b6 1000
0009b7 1020
0009b8 1040
0009b9 e00f
0009ba 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x20, 0x10, 0x40, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00DA
0009bb 0000
0009bc e00f
0009bd 1020
0009be 1040
0009bf 1040
0009c0 1020
0009c1 e00f
0009c2 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x20, 0x10, 0x40, 0x10, 0x40, 0x10, 0x20, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00DB
0009c3 0000
0009c4 e00f
0009c5 1060
0009c6 1000
0009c7 1000
0009c8 1060
0009c9 e00f
0009ca 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x60, 0x10, 0x00, 0x10, 0x00, 0x10, 0x60, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00DC
0009cb 0000
0009cc 000c
0009cd 0062
0009ce 0001
0009cf f000
0009d0 0001
0009d1 0062
0009d2 000c                      .DB	0x00, 0x00, 0x0C, 0x00, 0x62, 0x00, 0x01, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x62, 0x00, 0x0C, 0x00	; U+00DD
0009d3 0000
0009d4 f00f
0009d5 2004
0009d6 2004
0009d7 2004
0009d8 2004
0009d9 c003
0009da 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x04, 0x20, 0x04, 0x20, 0x04, 0x20, 0x04, 0x20, 0x03, 0xC0, 0x00, 0x00	; U+00DE
0009db 0000
0009dc f007
0009dd 0008
0009de 0008
0009df 1009
0009e0 100b
0009e1 e004
0009e2 0000                      .DB	0x00, 0x00, 0x07, 0xF0, 0x08, 0x00, 0x08, 0x00, 0x09, 0x10, 0x0B, 0x10, 0x04, 0xE0, 0x00, 0x00	; U+00DF
0009e3 0000
0009e4 6000
0009e5 9012
0009e6 900a
0009e7 9002
0009e8 9002
0009e9 f001
0009ea 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x12, 0x90, 0x0A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E0
0009eb 0000
0009ec 6000
0009ed 9002
0009ee 9002
0009ef 900a
0009f0 9012
0009f1 f001
0009f2 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x02, 0x90, 0x02, 0x90, 0x0A, 0x90, 0x12, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E1
0009f3 0000
0009f4 6000
0009f5 900a
0009f6 9012
0009f7 9012
0009f8 900a
0009f9 f001
0009fa 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x0A, 0x90, 0x12, 0x90, 0x12, 0x90, 0x0A, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E2
0009fb 0000
0009fc 6008
0009fd 9012
0009fe 9012
0009ff 900a
000a00 900a
000a01 f011
000a02 0000                      .DB	0x00, 0x00, 0x08, 0x60, 0x12, 0x90, 0x12, 0x90, 0x0A, 0x90, 0x0A, 0x90, 0x11, 0xF0, 0x00, 0x00	; U+00E3
000a03 0000
000a04 6000
000a05 901a
000a06 9002
000a07 9002
000a08 901a
000a09 f001
000a0a 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x1A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x1A, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E4
000a0b 0000
000a0c 6000
000a0d 9032
000a0e 904a
000a0f 904a
000a10 9032
000a11 f001
000a12 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x32, 0x90, 0x4A, 0x90, 0x4A, 0x90, 0x32, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E5
000a13 0000
000a14 6000
000a15 9002
000a16 9002
000a17 e001
000a18 9002
000a19 9002
000a1a 9001                      .DB	0x00, 0x00, 0x00, 0x60, 0x02, 0x90, 0x02, 0x90, 0x01, 0xE0, 0x02, 0x90, 0x02, 0x90, 0x01, 0x90	; U+00E6
000a1b 0000
000a1c e001
000a1d 1202
000a1e 1202
000a1f 1c02
000a20 1002
000a21 2001
000a22 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x12, 0x02, 0x12, 0x02, 0x1C, 0x02, 0x10, 0x01, 0x20, 0x00, 0x00	; U+00E7
000a23 0000
000a24 e001
000a25 9012
000a26 900a
000a27 9002
000a28 9002
000a29 9001
000a2a 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x12, 0x90, 0x0A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00E8
000a2b 0000
000a2c e001
000a2d 9002
000a2e 9002
000a2f 900a
000a30 9012
000a31 9001
000a32 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x90, 0x02, 0x90, 0x0A, 0x90, 0x12, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00E9
000a33 0000
000a34 e001
000a35 900a
000a36 9012
000a37 9012
000a38 900a
000a39 9001
000a3a 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x0A, 0x90, 0x12, 0x90, 0x12, 0x90, 0x0A, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00EA
000a3b 0000
000a3c e001
000a3d 901a
000a3e 9002
000a3f 9002
000a40 901a
000a41 9001
000a42 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x1A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x1A, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00EB
000a43 0000
000a44 0000
000a45 1012
000a46 100a
000a47 f003
000a48 1000
000a49 1000
000a4a 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x12, 0x10, 0x0A, 0x10, 0x03, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00EC
000a4b 0000
000a4c 0000
000a4d 1002
000a4e 1002
000a4f f00b
000a50 1010
000a51 1000
000a52 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x02, 0x10, 0x0B, 0xF0, 0x10, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00ED
000a53 0000
000a54 0000
000a55 100a
000a56 1012
000a57 f013
000a58 1008
000a59 1000
000a5a 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x0A, 0x10, 0x12, 0x10, 0x13, 0xF0, 0x08, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00EE
000a5b 0000
000a5c 0000
000a5d 101a
000a5e 1002
000a5f f003
000a60 1018
000a61 1000
000a62 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x1A, 0x10, 0x02, 0x10, 0x03, 0xF0, 0x18, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00EF
000a63 0000
000a64 e001
000a65 100a
000a66 102a
000a67 101a
000a68 1016
000a69 e021
000a6a 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x0A, 0x10, 0x2A, 0x10, 0x1A, 0x10, 0x16, 0x10, 0x21, 0xE0, 0x00, 0x00	; U+00F0
000a6b 0000
000a6c f00b
000a6d 0012
000a6e 0012
000a6f 000a
000a70 000a
000a71 f011
000a72 0000                      .DB	0x00, 0x00, 0x0B, 0xF0, 0x12, 0x00, 0x12, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x11, 0xF0, 0x00, 0x00	; U+00F1
000a73 0000
000a74 e001
000a75 1012
000a76 100a
000a77 1002
000a78 1002
000a79 e001
000a7a 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x12, 0x10, 0x0A, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F2
000a7b 0000
000a7c e001
000a7d 1002
000a7e 1002
000a7f 100a
000a80 1012
000a81 e001
000a82 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x0A, 0x10, 0x12, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F3
000a83 0000
000a84 e001
000a85 100a
000a86 1012
000a87 1012
000a88 100a
000a89 e001
000a8a 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x0A, 0x10, 0x12, 0x10, 0x12, 0x10, 0x0A, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F4
000a8b 0000
000a8c e009
000a8d 1012
000a8e 1012
000a8f 100a
000a90 100a
000a91 e011
000a92 0000                      .DB	0x00, 0x00, 0x09, 0xE0, 0x12, 0x10, 0x12, 0x10, 0x0A, 0x10, 0x0A, 0x10, 0x11, 0xE0, 0x00, 0x00	; U+00F5
000a93 0000
000a94 e001
000a95 101a
000a96 1002
000a97 1002
000a98 101a
000a99 e001
000a9a 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x1A, 0x10, 0x02, 0x10, 0x02, 0x10, 0x1A, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F6
000a9b 0000
000a9c 8000
000a9d 8000
000a9e b006
000a9f b006
000aa0 8000
000aa1 8000
000aa2 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x06, 0xB0, 0x06, 0xB0, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00	; U+00F7
000aa3 0000
000aa4 e801
000aa5 3002
000aa6 5002
000aa7 9002
000aa8 1003
000aa9 e005
000aaa 0000                      .DB	0x00, 0x00, 0x01, 0xE8, 0x02, 0x30, 0x02, 0x50, 0x02, 0x90, 0x03, 0x10, 0x05, 0xE0, 0x00, 0x00	; U+00F8
000aab 0000
000aac e003
000aad 1010
000aae 1008
000aaf 1000
000ab0 1000
000ab1 f003
000ab2 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x10, 0x10, 0x08, 0x10, 0x00, 0x10, 0x00, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00F9
000ab3 0000
000ab4 e003
000ab5 1000
000ab6 1000
000ab7 1008
000ab8 1010
000ab9 f003
000aba 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x08, 0x10, 0x10, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00FA
000abb 0000
000abc e003
000abd 1008
000abe 1010
000abf 1010
000ac0 1008
000ac1 f003
000ac2 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00FB
000ac3 0000
000ac4 e003
000ac5 1018
000ac6 1000
000ac7 1000
000ac8 1018
000ac9 f003
000aca 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x18, 0x10, 0x00, 0x10, 0x00, 0x10, 0x18, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00FC
000acb 0000
000acc e003
000acd 1200
000ace 1200
000acf 1208
000ad0 1210
000ad1 fc03
000ad2 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x12, 0x00, 0x12, 0x08, 0x12, 0x10, 0x12, 0x03, 0xFC, 0x00, 0x00	; U+00FD
000ad3 0000
000ad4 fe1f
000ad5 1002
000ad6 1002
000ad7 1002
000ad8 1002
000ad9 e001
000ada 0000                      .DB	0x00, 0x00, 0x1F, 0xFE, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00FE
000adb 0000
000adc e003
000add 1218
000ade 1200
000adf 1200
000ae0 1218
000ae1 fc03
000ae2 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x18, 0x12, 0x00, 0x12, 0x00, 0x12, 0x18, 0x12, 0x03, 0xFC, 0x00, 0x00	; U+00FF
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32U4" register use summary:
x  :  12 y  :   2 z  :   5 r0 :  14 r1 :  11 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 154 r17:  28 r18:  30 r19:  41 r20:   3 
r21:  28 r22:  13 r23:   0 r24:   5 r25:   5 r26:  38 r27:  35 r28:   8 
r29:   8 r30:  25 r31:  25 
Registers used: 20 out of 35 (57.1%)

"ATmega32U4" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   9 adiw  :   5 and   :   2 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   2 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :  25 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   1 cbi   :   6 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   1 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  16 cpse  :   0 dec   :  18 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   5 inc   :   2 jmp   :   0 
ld    :   4 ldd   :   0 ldi   : 114 lds   :   2 lpm   :   7 lsl   :   3 
lsr   :  15 mov   :   7 movw  :   1 mul   :   1 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   2 ori   :   0 out   :  18 pop   :  91 
push  :  91 rcall :  47 ret   :  27 reti  :   0 rjmp  :  21 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  14 sbic  :   0 sbis  :   2 
sbiw  :   1 sbr   :   0 sbrc  :   0 sbrs  :   4 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  10 std   :   0 sts   :  10 
sub   :   1 subi  :   1 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 40 out of 113 (35.4%)

"ATmega32U4" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0015c6   1208   4198   5406   32768  16.5%
[.dseg] 0x000100 0x00099b      0      2      2    2560   0.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
