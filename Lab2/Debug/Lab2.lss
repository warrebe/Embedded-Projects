
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022e  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000025d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000026b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f2a  00000000  00000000  0000029b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a6b  00000000  00000000  000011c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000364  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001f94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000371  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000240  00000000  00000000  00002349  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00002589  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001ac  000001ac  00000220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.hitRight 00000056  000000c4  000000c4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.hitLeft 00000056  0000011a  0000011a  0000018e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000026  00000170  00000170  000001e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  000001b4  000001b4  00000228  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  000001b6  000001b6  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  000001b8  000001b8  0000022c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000196  00000196  0000020a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  000001b0  000001b0  00000224  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
   8:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
   c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  10:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  14:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  18:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  1c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  20:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  24:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  28:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  2c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  30:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  34:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  38:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  3c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  40:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  44:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  48:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  4c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  50:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  54:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  58:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  5c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  60:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  64:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  68:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  6c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  70:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  74:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  78:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  7c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  80:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  84:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  88:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  8c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  90:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  94:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  98:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  9c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  a0:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  a4:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  a8:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  bc:	0c 94 cb 00 	jmp	0x196	; 0x196 <exit>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>

Disassembly of section .text:

000001ac <__bad_interrupt>:
 1ac:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.hitRight:

000000c4 <hitRight>:
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>

void hitRight(){
	PORTB = 0b11110000;	//Halt TekBot before changing direction
  c4:	80 ef       	ldi	r24, 0xF0	; 240
  c6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	39 e6       	ldi	r19, 0x69	; 105
  cc:	98 e1       	ldi	r25, 0x18	; 24
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	30 40       	sbci	r19, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <hitRight+0xa>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <hitRight+0x14>
  d8:	00 00       	nop
	_delay_ms(500);		//Wait
	PORTB = 0b00000000;	//Make TekBot go backward
  da:	15 b8       	out	0x05, r1	; 5
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	33 ed       	ldi	r19, 0xD3	; 211
  e0:	90 e3       	ldi	r25, 0x30	; 48
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	30 40       	sbci	r19, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <hitRight+0x1e>
  ea:	00 c0       	rjmp	.+0      	; 0xec <hitRight+0x28>
  ec:	00 00       	nop
	_delay_ms(1000);	//Continue backwards for 1000 ms
	PORTB = 0b10000000;	//Make TekBot turn left
  ee:	90 e8       	ldi	r25, 0x80	; 128
  f0:	95 b9       	out	0x05, r25	; 5
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	33 ed       	ldi	r19, 0xD3	; 211
  f6:	90 e3       	ldi	r25, 0x30	; 48
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	30 40       	sbci	r19, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <hitRight+0x34>
 100:	00 c0       	rjmp	.+0      	; 0x102 <hitRight+0x3e>
 102:	00 00       	nop
	_delay_ms(1000);	//Continue turning left for 1000 ms
	PORTB = 0b11110000; //Halt TekBot before changing direction
 104:	85 b9       	out	0x05, r24	; 5
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	39 e6       	ldi	r19, 0x69	; 105
 10a:	88 e1       	ldi	r24, 0x18	; 24
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	30 40       	sbci	r19, 0x00	; 0
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <hitRight+0x48>
 114:	00 c0       	rjmp	.+0      	; 0x116 <hitRight+0x52>
 116:	00 00       	nop
 118:	08 95       	ret

Disassembly of section .text.hitLeft:

0000011a <hitLeft>:
	_delay_ms(500);
	return;
}

void hitLeft(){
	PORTB = 0b11110000;	//Halt TekBot before changing direction
 11a:	80 ef       	ldi	r24, 0xF0	; 240
 11c:	85 b9       	out	0x05, r24	; 5
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	39 e6       	ldi	r19, 0x69	; 105
 122:	98 e1       	ldi	r25, 0x18	; 24
 124:	21 50       	subi	r18, 0x01	; 1
 126:	30 40       	sbci	r19, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <hitLeft+0xa>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <hitLeft+0x14>
 12e:	00 00       	nop
	_delay_ms(500);		//Wait
	PORTB = 0b00000000; //Make TekBot go backward
 130:	15 b8       	out	0x05, r1	; 5
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	33 ed       	ldi	r19, 0xD3	; 211
 136:	90 e3       	ldi	r25, 0x30	; 48
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	30 40       	sbci	r19, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <hitLeft+0x1e>
 140:	00 c0       	rjmp	.+0      	; 0x142 <hitLeft+0x28>
 142:	00 00       	nop
	_delay_ms(1000);    //Continue backwards for 500 ms
	PORTB = 0b00010000; //Make TekBot turn right
 144:	90 e1       	ldi	r25, 0x10	; 16
 146:	95 b9       	out	0x05, r25	; 5
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	33 ed       	ldi	r19, 0xD3	; 211
 14c:	90 e3       	ldi	r25, 0x30	; 48
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	30 40       	sbci	r19, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <hitLeft+0x34>
 156:	00 c0       	rjmp	.+0      	; 0x158 <hitLeft+0x3e>
 158:	00 00       	nop
	_delay_ms(1000);    //Continue turning left for 1000 ms
	PORTB = 0b11110000; //Halt TekBot before changing direction
 15a:	85 b9       	out	0x05, r24	; 5
 15c:	2f ef       	ldi	r18, 0xFF	; 255
 15e:	39 e6       	ldi	r19, 0x69	; 105
 160:	88 e1       	ldi	r24, 0x18	; 24
 162:	21 50       	subi	r18, 0x01	; 1
 164:	30 40       	sbci	r19, 0x00	; 0
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <hitLeft+0x48>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <hitLeft+0x52>
 16c:	00 00       	nop
 16e:	08 95       	ret

Disassembly of section .text.main:

00000170 <main>:
}

int main(void){
	
	//INIT routine////
	DDRB = 0b11111111;	// configure Port B pins for input/output
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b11110000; // set initial value for Port B outputs
 174:	80 ef       	ldi	r24, 0xF0	; 240
 176:	85 b9       	out	0x05, r24	; 5
						// (initially, disable both motors)
	DDRD = 0b00000000;	// configure Port D pins for input/output
 178:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b11110000; // set initial value for Port D inputs
 17a:	8b b9       	out	0x0b, r24	; 11
	//////////////////
	
	while (1) {								// loop forever
		
		PORTB = 0b10010000;					//Make TekBot go forward
 17c:	80 e9       	ldi	r24, 0x90	; 144
 17e:	85 b9       	out	0x05, r24	; 5
	
		uint8_t mpr = PIND & 0b00110000;	//Check for whisker hit
 180:	c9 b1       	in	r28, 0x09	; 9
 182:	c0 73       	andi	r28, 0x30	; 48
		if (mpr == 0b00010000){				//If right whisker hit
 184:	c0 31       	cpi	r28, 0x10	; 16
 186:	11 f4       	brne	.+4      	; 0x18c <main+0x1c>
			hitRight();
 188:	0e 94 62 00 	call	0xc4	; 0xc4 <__data_load_end>
		}
		if (mpr == 0b00100000){				//If left whisker hit
 18c:	c0 32       	cpi	r28, 0x20	; 32
 18e:	b1 f7       	brne	.-20     	; 0x17c <main+0xc>
			hitLeft();
 190:	0e 94 8d 00 	call	0x11a	; 0x11a <hitLeft>
 194:	f3 cf       	rjmp	.-26     	; 0x17c <main+0xc>

Disassembly of section .text.__dummy_fini:

000001b4 <_fini>:
 1b4:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001b6 <__funcs_on_exit>:
 1b6:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001b8 <__simulator_exit>:
 1b8:	08 95       	ret

Disassembly of section .text.exit:

00000196 <exit>:
 196:	ec 01       	movw	r28, r24
 198:	0e 94 db 00 	call	0x1b6	; 0x1b6 <__funcs_on_exit>
 19c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_fini>
 1a0:	ce 01       	movw	r24, r28
 1a2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__simulator_exit>
 1a6:	ce 01       	movw	r24, r28
 1a8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_Exit>

Disassembly of section .text._Exit:

000001b0 <_Exit>:
 1b0:	0e 94 60 00 	call	0xc0	; 0xc0 <_exit>
